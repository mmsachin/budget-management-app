----- Content from: C:\Users\sachi\Desktop\budget-management-app\backend\app.py -----
# backend/app.py
from flask import Flask, jsonify
from api.budget_api import budget_bp
from api.aop_api import aop_bp
from api.user_api import user_bp
from api.cost_center_api import cost_center_bp
from api.purchase_order_api import purchase_order_bp
from api.org_hierarchy_api import org_hierarchy_bp
from flask_cors import CORS

app = Flask(__name__)

# Configure CORS with more specific settings
CORS(app, resources={
    r"/*": {
        "origins": ["http://localhost:8000"],
        "methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
        "allow_headers": ["Content-Type", "Authorization"],
        "supports_credentials": True
    }
})

app.register_blueprint(budget_bp)
app.register_blueprint(aop_bp)
app.register_blueprint(cost_center_bp)
app.register_blueprint(purchase_order_bp)
app.register_blueprint(user_bp)
app.register_blueprint(org_hierarchy_bp)  # Register the new blueprint

@app.route('/')
def hello_world():
    return jsonify({'message': 'Hello from Sachin!'})

if __name__ == '__main__':
    app.run(debug=True, port=5000)

----- Content from: C:\Users\sachi\Desktop\budget-management-app\backend\database.py -----
# backend/database.py
from google.cloud import spanner
import os

INSTANCE_ID = 'budget-management'
DATABASE_ID = 'budget-db'

# Initialize Spanner client
spanner_client = spanner.Client()
instance = spanner_client.instance(INSTANCE_ID)
database = instance.database(DATABASE_ID)

def get_db():
    """Returns the Spanner database object."""
    return database

----- Content from: C:\Users\sachi\Desktop\budget-management-app\backend\utils.py -----


----- Content from: C:\Users\sachi\Desktop\budget-management-app\backend\__init__.py -----


----- Content from: C:\Users\sachi\Desktop\budget-management-app\backend\api\aop_api.py -----
# backend/api/aop_api.py
from flask import Blueprint, request, jsonify
from services import aop_service
from services import cost_center_service

aop_bp = Blueprint('aop', __name__, url_prefix='/aop')

# --- AOP Header Endpoints ---

@aop_bp.route('/headers', methods=['POST'])
def create_aop_header():
    try:
        aop_data = request.get_json()
        if not aop_data or 'aop_name' not in aop_data or 'total_amount' not in aop_data:
            return jsonify({'error': 'Invalid AOP Header data. aop_name and total_amount are required.'}), 400

        try:
            aop_data['total_amount'] = float(aop_data['total_amount'])
        except ValueError:
            return jsonify({'error': 'total_amount must be a number'}), 400

        aop_id = aop_service.create_aop_header(aop_data)
        return jsonify({'aop_id': aop_id}), 201
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@aop_bp.route('/headers', methods=['GET'])
def get_aop_headers():
    try:
        headers = aop_service.get_all_aop_headers()
        return jsonify(headers), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@aop_bp.route('/headers/<aop_id>', methods=['GET'])
def get_aop_header(aop_id):
    try:
        header = aop_service.get_aop_header_by_id(aop_id)
        if header:
            return jsonify(header), 200
        else:
            return jsonify({'message': 'AOP Header not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@aop_bp.route('/headers/<aop_id>', methods=['PUT'])
def update_aop_header(aop_id):
    try:
        aop_data = request.get_json()

        if not aop_data or 'aop_name' not in aop_data or 'total_amount' not in aop_data or 'status' not in aop_data :
            return jsonify({'error': 'Invalid AOP Header data. aop_name, total_amount and status are required.'}), 400

        try:
            aop_data['total_amount'] = float(aop_data['total_amount'])
        except ValueError:
            return jsonify({'error': 'total_amount must be a number'}), 400

        if aop_service.update_aop_header(aop_id, aop_data):
            return jsonify({'message': 'AOP Header updated successfully'}), 200
        else:
            return jsonify({'message': 'AOP Header not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@aop_bp.route('/headers/<aop_id>/status', methods=['PUT'])
def set_aop_header_status(aop_id):
    try:
        data = request.get_json()
        if 'status' not in data:
            return jsonify({'error': 'Status is required'}), 400
        status = data['status']
        if status.lower() not in ['draft', 'active', 'eol']:
            return jsonify({'error': 'Invalid status value'}), 400

        if status.lower() == "active":
            aop_header = aop_service.get_aop_header_by_id(aop_id)
            if not aop_header:
                return jsonify({'message': 'AOP Header not found'}), 404

            total_detail_amount = aop_service.get_total_aop_detail_amount(aop_id)

            if total_detail_amount > aop_header["total_amount"]:
                return jsonify({'error': 'Total AOP Detail amount exceeds AOP Header total amount'}), 400

        aop_service.set_aop_status(aop_id, status)
        return jsonify({'message': f'AOP status set to {status}'}), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@aop_bp.route('/headers/<aop_id>', methods=['DELETE'])
def delete_aop_header(aop_id):
    try:
        if aop_service.delete_aop_header(aop_id):
            return jsonify({'message': 'AOP Header deleted successfully'}), 204
        else:
            return jsonify({'message': 'AOP Header not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500


# --- AOP Detail Endpoints ---

@aop_bp.route('/details', methods=['POST'])
def create_aop_detail():
    try:
        aop_detail_data = request.get_json()
        required_fields = ['aop_id', 'cost_center_code', 'amount']
        if not aop_detail_data or any(field not in aop_detail_data for field in required_fields):
            return jsonify({'error': 'Invalid AOP Detail data. aop_id, cost_center_code and amount are required.'}), 400

        try:
            aop_detail_data['amount'] = float(aop_detail_data['amount'])
        except ValueError:
            return jsonify({'error': 'amount must be a number'}), 400

        cost_center = cost_center_service.get_cost_center_by_code(aop_detail_data['cost_center_code'])
        if not cost_center:
             return jsonify({'error': 'Invalid cost_center_code. Cost Center does not exist.'}), 400

        aop_detail_id = aop_service.create_aop_detail(aop_detail_data)
        return jsonify({'aop_detail_id': aop_detail_id}), 201
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@aop_bp.route('/details/<aop_detail_id>', methods=['GET'])
def get_aop_detail(aop_detail_id):
    try:
        detail = aop_service.get_aop_detail_by_id(aop_detail_id)
        if detail:
            return jsonify(detail), 200
        else:
            return jsonify({'message': 'AOP Detail not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@aop_bp.route('/details/by-aop/<aop_id>', methods=['GET'])
def get_aop_details_for_aop(aop_id):
    try:
        details = aop_service.get_aop_details_by_aop_id(aop_id)
        return jsonify(details), 200
    except Exception as e:
        return jsonify({'error':str(e)}), 500

@aop_bp.route('/details/<aop_detail_id>', methods=['PUT'])
def update_aop_detail(aop_detail_id):
    try:
        aop_detail_data = request.get_json()
        required_fields = ['aop_id', 'cost_center_code', 'amount']
        if not aop_detail_data or any(field not in aop_detail_data for field in required_fields):
           return jsonify({'error': 'Invalid AOP Detail data. aop_id, cost_center_code, and amount are required.'}), 400

        try:
            aop_detail_data['amount'] = float(aop_detail_data['amount'])
        except ValueError:
            return jsonify({'error': 'amount must be a number'}), 400

        cost_center = cost_center_service.get_cost_center_by_code(aop_detail_data['cost_center_code'])
        if not cost_center:
             return jsonify({'error': 'Invalid cost_center_code. Cost Center does not exist.'}), 400

        if aop_service.update_aop_detail(aop_detail_id, aop_detail_data):
            return jsonify({'message': 'AOP Detail updated successfully'}), 200
        else:
            return jsonify({'message': 'AOP Detail not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@aop_bp.route('/details/<aop_detail_id>', methods=['DELETE'])
def delete_aop_detail(aop_detail_id):
    try:
        if aop_service.delete_aop_detail(aop_detail_id):
            return jsonify({'message': 'AOP Detail deleted successfully'}), 204
        else:
            return jsonify({'message': 'AOP Detail not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@aop_bp.route('/details/by-aop/<aop_id>/with-names', methods=['GET'])
def get_aop_details_with_names(aop_id):
    try:
        details = aop_service.get_aop_details_with_cost_center_names(aop_id)
        return jsonify(details), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@aop_bp.route('/details/total-amount/<aop_id>', methods=['GET'])
def get_total_detail_amount(aop_id):
    try:
        total_amount = aop_service.get_total_aop_detail_amount(aop_id)
        return jsonify({'total_amount': total_amount}), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

----- Content from: C:\Users\sachi\Desktop\budget-management-app\backend\api\budget_api.py -----
# backend/api/budget_api.py
from flask import Blueprint, request, jsonify
from services import budget_service

budget_bp = Blueprint('budget', __name__, url_prefix='/budgets')

@budget_bp.route('/', methods=['GET'])
def get_budgets():
    try:
        budgets = budget_service.get_all_budgets()
        return jsonify(budgets)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@budget_bp.route('/<budget_id>', methods=['GET'])
def get_budget(budget_id):
    print(f"Received budget_id: {budget_id}")
    try:
        budget = budget_service.get_budget_by_id(budget_id)
        if budget:
            return jsonify(budget)
        else:
            return jsonify({'message': 'Budget not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@budget_bp.route('/', methods=['POST'])
def create_budget():
    try:
        budget_data = request.get_json()
        print("Budget data received:", budget_data)
        if not budget_data or 'amount' not in budget_data or 'project' not in budget_data:
            return jsonify({'error': 'Invalid budget data.  amount and project are required.'}), 400

        budget_id = budget_service.create_budget(budget_data)

        return jsonify({'budget_id': budget_id}), 201
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@budget_bp.route('/<budget_id>', methods=['PUT'])
def update_budget(budget_id):
    try:
        budget_data = request.get_json()
        if not budget_data or 'amount' not in budget_data or 'project' not in budget_data:
            return jsonify({'error': 'Invalid budget data.  amount and project are required.'}), 400

        if budget_service.update_budget(budget_id, budget_data):
            return jsonify({'message': 'Budget updated successfully'})
        else:
            return jsonify({'message': 'Budget not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@budget_bp.route('/<budget_id>', methods=['DELETE'])
def delete_budget(budget_id):
    try:
        if budget_service.delete_budget(budget_id):
            return jsonify({'message': 'Budget deleted successfully'}),204
        else:
            return jsonify({'message': 'Budget not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

----- Content from: C:\Users\sachi\Desktop\budget-management-app\backend\api\cost_center_api.py -----
# backend/api/cost_center_api.py
from flask import Blueprint, request, jsonify
from services.cost_center_service import CostCenterService

cost_center_bp = Blueprint('cost_centers', __name__, url_prefix='/costcenters')

@cost_center_bp.route('/', methods=['GET'])
def get_cost_centers():
    try:
        cost_centers = CostCenterService.get_all_cost_centers()
        return jsonify(cost_centers)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@cost_center_bp.route('/<cost_center_code>', methods=['GET'])
def get_cost_center(cost_center_code):
    try:
        cost_center = CostCenterService.get_cost_center_by_code(cost_center_code)
        if cost_center:
            return jsonify(cost_center)
        return jsonify({'message': 'Cost center not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@cost_center_bp.route('/', methods=['POST'])
def create_cost_center():
    try:
        cost_center_data = request.get_json()
        cost_center_code = CostCenterService.create_cost_center(cost_center_data)
        return jsonify({'cost_center_code': cost_center_code}), 201
    except ValueError as e:
        return jsonify({'error': str(e)}), 400
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@cost_center_bp.route('/<cost_center_code>', methods=['PUT'])
def update_cost_center(cost_center_code):
    try:
        cost_center_data = request.get_json()
        success = CostCenterService.update_cost_center(cost_center_code, cost_center_data)
        if success:
            return jsonify({'message': 'Cost center updated successfully'})
        return jsonify({'message': 'Cost center not found'}), 404
    except ValueError as e:
        return jsonify({'error': str(e)}), 400
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@cost_center_bp.route('/<cost_center_code>', methods=['DELETE'])
def delete_cost_center(cost_center_code):
    try:
        success = CostCenterService.delete_cost_center(cost_center_code)
        if success:
            return jsonify({'message': 'Cost center deleted successfully'}), 204
        return jsonify({'message': 'Cost center not found'}), 404
    except ValueError as e:
        return jsonify({'error': str(e)}), 400
    except Exception as e:
        return jsonify({'error': str(e)}), 500

----- Content from: C:\Users\sachi\Desktop\budget-management-app\backend\api\employee_api.py -----


----- Content from: C:\Users\sachi\Desktop\budget-management-app\backend\api\org_hierarchy_api.py -----
# backend/api/org_hierarchy_api.py
from flask import Blueprint, request, jsonify
from services.org_hierarchy_service import OrgHierarchyService
from services.user_service import UserService  # Import UserService

org_hierarchy_bp = Blueprint('org_hierarchy', __name__, url_prefix='/org-hierarchy')

@org_hierarchy_bp.route('/relationships', methods=['POST'])
def create_relationship():
    try:
        relationship_data = request.get_json()
        if not all(k in relationship_data for k in ('employee_ldap', 'manager_ldap')):
            return jsonify({'error': 'Invalid relationship data.  employee_ldap and manager_ldap are required.'}), 400

        # Check if both employee and manager exist
        if not UserService.get_user_by_ldap(relationship_data['employee_ldap']):
            return jsonify({'error': 'Employee LDAP does not exist.'}), 400
        if not UserService.get_user_by_ldap(relationship_data['manager_ldap']):
            return jsonify({'error': 'Manager LDAP does not exist.'}), 400

        relationship_id = OrgHierarchyService.create_relationship(relationship_data)
        return jsonify({'relationship_id': relationship_id}), 201
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@org_hierarchy_bp.route('/relationships', methods=['GET'])
def get_all_relationships():
    try:
        relationships = OrgHierarchyService.get_all_relationships()
        return jsonify(relationships), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@org_hierarchy_bp.route('/relationships/<relationship_id>', methods=['GET'])
def get_relationship(relationship_id):
    try:
        relationship = OrgHierarchyService.get_relationship_by_id(relationship_id)
        if relationship:
            return jsonify(relationship), 200
        else:
            return jsonify({'message': 'Relationship not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@org_hierarchy_bp.route('/relationships/manager/<manager_ldap>', methods=['GET'])
def get_relationships_by_manager(manager_ldap):
    try:
        relationships = OrgHierarchyService.get_relationships_by_manager(manager_ldap)
        return jsonify(relationships), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@org_hierarchy_bp.route('/relationships/employee/<employee_ldap>', methods=['GET'])
def get_relationships_by_employee(employee_ldap):
    try:
        relationships = OrgHierarchyService.get_relationships_by_employee(employee_ldap)
        return jsonify(relationships), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@org_hierarchy_bp.route('/relationships/<relationship_id>', methods=['PUT'])
def update_relationship(relationship_id):
    try:
        relationship_data = request.get_json()
         # Check if both employee and manager exist
        if not UserService.get_user_by_ldap(relationship_data['employee_ldap']):
            return jsonify({'error': 'Employee LDAP does not exist.'}), 400
        if not UserService.get_user_by_ldap(relationship_data['manager_ldap']):
            return jsonify({'error': 'Manager LDAP does not exist.'}), 400
        if OrgHierarchyService.update_relationship(relationship_id, relationship_data):
            return jsonify({'message': 'Relationship updated successfully'}), 200
        else:
            return jsonify({'message': 'Relationship not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@org_hierarchy_bp.route('/relationships/<relationship_id>', methods=['DELETE'])
def delete_relationship(relationship_id):
    try:
        if OrgHierarchyService.delete_relationship(relationship_id):
            return jsonify({'message': 'Relationship deleted successfully'}), 204
        else:
            return jsonify({'message': 'Relationship not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@org_hierarchy_bp.route('/manager/<manager_ldap>', methods=['GET'])
def get_hierarchy(manager_ldap):
    """
    Gets the reporting hierarchy for a given manager.
    """
    try:
        hierarchy = OrgHierarchyService.get_hierarchy_for_manager(manager_ldap)
        return jsonify(hierarchy), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

----- Content from: C:\Users\sachi\Desktop\budget-management-app\backend\api\purchase_order_api.py -----
# backend/api/purchase_order_api.py
from flask import Blueprint, jsonify
from services import purchase_order_service

purchase_order_bp = Blueprint('purchase_orders', __name__, url_prefix='/purchase-orders')

@purchase_order_bp.route('/', methods=['GET'])
def get_purchase_orders():
    try:
        purchase_orders = purchase_order_service.get_all_purchase_orders()
        return jsonify(purchase_orders), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@purchase_order_bp.route('/<po_id>', methods=['GET'])
def get_purchase_order(po_id):
    try:
        purchase_order = purchase_order_service.get_purchase_order_by_id(po_id)
        if purchase_order:
            return jsonify(purchase_order), 200
        return jsonify({'message': 'Purchase order not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@purchase_order_bp.route('/user/<ldap>', methods=['GET'])
def get_user_purchase_orders(ldap):
    try:
        purchase_orders = purchase_order_service.get_purchase_orders_by_ldap(ldap)
        return jsonify(purchase_orders), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

----- Content from: C:\Users\sachi\Desktop\budget-management-app\backend\api\report_api.py -----


----- Content from: C:\Users\sachi\Desktop\budget-management-app\backend\api\user_api.py -----
# backend/api/user_api.py
from flask import Blueprint, request, jsonify
from services.user_service import UserService

user_bp = Blueprint('users', __name__, url_prefix='/users')

@user_bp.route('/', methods=['GET'])
def get_users():
    try:
        users = UserService.get_all_users()
        return jsonify(users)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@user_bp.route('/<ldap>', methods=['GET'])
def get_user(ldap):
    try:
        user = UserService.get_user_by_ldap(ldap)
        if user:
            return jsonify(user)
        return jsonify({'message': 'User not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@user_bp.route('/', methods=['POST'])
def create_user():
    try:
        user_data = request.get_json()
        ldap = UserService.create_user(user_data)
        return jsonify({'ldap': ldap}), 201
    except ValueError as e:
        return jsonify({'error': str(e)}), 400
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@user_bp.route('/<ldap>', methods=['PUT'])
def update_user(ldap):
    try:
        user_data = request.get_json()
        success = UserService.update_user(ldap, user_data)
        if success:
            return jsonify({'message': 'User updated successfully'})
        return jsonify({'message': 'User not found'}), 404
    except ValueError as e:
        return jsonify({'error': str(e)}), 400
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@user_bp.route('/<ldap>', methods=['DELETE'])
def delete_user(ldap):
    try:
        success = UserService.delete_user(ldap)
        if success:
            return jsonify({'message': 'User deleted successfully'}), 204
        return jsonify({'message': 'User not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

----- Content from: C:\Users\sachi\Desktop\budget-management-app\backend\api\__init__.py -----


----- Content from: C:\Users\sachi\Desktop\budget-management-app\backend\models\aop.py -----
# backend/models/aop.py
class AopHeader:
    def __init__(self, aop_id, name, total_amount, state):
        self.aop_id = aop_id
        self.name = name
        self.total_amount = total_amount
        self.state = state

    def to_dict(self):
        return {
            'aop_id': self.aop_id,
            'aop_name': self.name,
            'total_amount': self.total_amount,
            'status': self.state
        }


class AopDetail:
    def __init__(self, aop_id, aop_detail_id, cost_center_code, amount):
        self.aop_id = aop_id
        self.aop_detail_id = aop_detail_id
        self.cost_center_code = cost_center_code
        self.amount = amount

    def to_dict(self):
        return {
            'aop_id': self.aop_id,
            'aop_detail_id': self.aop_detail_id,
            'cost_center_code': self.cost_center_code,
            'amount': self.amount
        }

----- Content from: C:\Users\sachi\Desktop\budget-management-app\backend\models\budget.py -----
# backend/models/budget.py
class Budget:
    def __init__(self, budget_id, aop_id, project, description, amount, ldap):
        self.budget_id = budget_id
        self.aop_id = aop_id
        self.project = project
        self.description = description
        self.amount = amount
        self.ldap = ldap

    def to_dict(self):
        return {
            'budget_id': self.budget_id,
            'aop_id': self.aop_id,
            'project': self.project,
            'description': self.description,
            'amount': self.amount,
            'ldap': self.ldap
        }

----- Content from: C:\Users\sachi\Desktop\budget-management-app\backend\models\cost_center.py -----
# backend/models/cost_center.py
from typing import Dict, Any

class CostCenter:
    def __init__(self, cost_center_code: str, cost_center_name: str):
        if not cost_center_code or not cost_center_code.strip():
            raise ValueError("Cost center code cannot be empty")
        if not cost_center_name or not cost_center_name.strip():
            raise ValueError("Cost center name cannot be empty")

        self.cost_center_code = cost_center_code.strip()
        self.cost_center_name = cost_center_name.strip()

    def to_dict(self) -> Dict[str, Any]:
        return {
            'cost_center_code': self.cost_center_code,
            'cost_center_name': self.cost_center_name
        }

    @staticmethod
    def from_dict(data: Dict[str, Any]) -> 'CostCenter':
        if not isinstance(data, dict):
            raise ValueError("Input must be a dictionary")

        required_fields = ['cost_center_code', 'cost_center_name']
        if not all(field in data for field in required_fields):
            raise ValueError(f"Missing required fields: {required_fields}")

        return CostCenter(
            cost_center_code=data['cost_center_code'],
            cost_center_name=data['cost_center_name']
        )

    def validate(self) -> bool:
        if len(self.cost_center_code) > 50:
            raise ValueError("Cost center code cannot exceed 50 characters")
        if len(self.cost_center_name) > 255:
            raise ValueError("Cost center name cannot exceed 255 characters")
        if not self.cost_center_code.isalnum():
            raise ValueError("Cost center code must be alphanumeric")
        return True

----- Content from: C:\Users\sachi\Desktop\budget-management-app\backend\models\employee.py -----


----- Content from: C:\Users\sachi\Desktop\budget-management-app\backend\models\user.py -----
# backend/models/user.py
from typing import Dict, Any

class User:
    def __init__(self, ldap: str, first_name: str, last_name: str, email: str, level: str = None, cost_center_code: str = None):
        if not ldap or not ldap.strip():
            raise ValueError("LDAP cannot be empty")
        if not first_name or not first_name.strip():
            raise ValueError("First name cannot be empty")
        if not last_name or not last_name.strip():
            raise ValueError("Last name cannot be empty")
        if not email or not email.strip():
            raise ValueError("Email cannot be empty")

        self.ldap = ldap.strip()
        self.first_name = first_name.strip()
        self.last_name = last_name.strip()
        self.email = email.strip()
        self.level = level.strip() if level else None
        self.cost_center_code = cost_center_code.strip() if cost_center_code else None

    def to_dict(self) -> Dict[str, Any]:
        return {
            'ldap': self.ldap,
            'first_name': self.first_name,
            'last_name': self.last_name,
            'email': self.email,
            'level': self.level,
            'cost_center_code': self.cost_center_code
        }

    @staticmethod
    def from_dict(data: Dict[str, Any]) -> 'User':
        if not isinstance(data, dict):
            raise ValueError("Input must be a dictionary")

        required_fields = ['ldap', 'first_name', 'last_name', 'email']
        if not all(field in data for field in required_fields):
            raise ValueError(f"Missing required fields: {required_fields}")

        return User(
            ldap=data['ldap'],
            first_name=data['first_name'],
            last_name=data['last_name'],
            email=data['email'],
            level=data.get('level'),
            cost_center_code=data.get('cost_center_code')
        )

    def validate(self) -> bool:
        if len(self.ldap) > 255:
            raise ValueError("LDAP cannot exceed 255 characters")
        if len(self.first_name) > 255:
            raise ValueError("First name cannot exceed 255 characters")
        if len(self.last_name) > 255:
            raise ValueError("Last name cannot exceed 255 characters")
        if len(self.email) > 255:
            raise ValueError("Email cannot exceed 255 characters")
        if self.level and len(self.level) > 50:
            raise ValueError("Level cannot exceed 50 characters")
        return True

----- Content from: C:\Users\sachi\Desktop\budget-management-app\backend\models\__init__.py -----


----- Content from: C:\Users\sachi\Desktop\budget-management-app\backend\services\aop_service.py -----
# backend/services/aop_service.py
import random
from google.cloud import spanner
from database import get_db
from models.aop import AopHeader, AopDetail
from services import cost_center_service

def generate_int64_id():
    return random.randint(-(2**63), (2**63)-1)

def create_aop_header(aop_data):
    db = get_db()
    try:
        with db.batch() as batch:
            aop_id = generate_int64_id()
            batch.insert(
                table='AopHeaders',
                columns=('aop_id', 'name', 'total_amount', 'state'),
                values=[(
                    aop_id,
                    aop_data['aop_name'],
                    aop_data['total_amount'],
                    aop_data.get('status', 'draft')
                )]
            )
        return aop_id
    except Exception as e:
        print(f"Error creating AOP header: {e}")
        raise

def get_all_aop_headers():
    db = get_db()
    headers = []
    try:
        with db.snapshot() as snapshot:
            results = snapshot.read(
                table='AopHeaders',
                columns=('aop_id', 'name', 'total_amount', 'state'),
                keyset=spanner.KeySet(all_=True)
            )
            for row in results:
                headers.append(AopHeader(*row).to_dict())
        return headers
    except Exception as e:
        print(f"Error getting AOP headers: {e}")
        raise

def get_aop_header_by_id(aop_id):
    db = get_db()
    try:
        with db.snapshot() as snapshot:
            result = snapshot.read(
                table='AopHeaders',
                columns=('aop_id', 'name', 'total_amount', 'state'),
                keyset=spanner.KeySet(keys=[(int(aop_id),)]),  # Cast aop_id to int
                limit=1
            )
            rows = list(result)
            if rows:
                return AopHeader(*rows[0]).to_dict()
            return None
    except Exception as e:
        print(f"Error getting AOP header by ID: {e}")
        raise

def update_aop_header(aop_id, aop_data):
    db = get_db()
    try:
        with db.batch() as batch:
            batch.update(
                table='AopHeaders',
                columns=('aop_id', 'name', 'total_amount', 'state'),
                values=[(
                    int(aop_id),
                    aop_data['aop_name'],
                    aop_data['total_amount'],
                    aop_data['status'].lower()
                )]
            )
        return True
    except Exception as e:
        print(f"Error updating AOP header: {e}")
        raise

def delete_aop_header(aop_id):
    db = get_db()
    try:
        with db.batch() as batch:
            batch.delete(
                table='AopHeaders',
                keyset=spanner.KeySet(keys=[(int(aop_id),)])
            )
        return True
    except Exception as e:
        print(f"Error deleting AOP header: {e}")
        raise

def set_aop_status(aop_id, status):
    db = get_db()
    status = status.lower()
    if status == 'active':
        try:
            with db.transaction() as transaction:
                results = transaction.read(
                    table="AopHeaders",
                    columns=["aop_id", "state"],
                    keyset=spanner.KeySet(all_=True)
                )

                rows = list(results)
                active_aops = [row[0] for row in rows if row[1] == "active"]

                if len(active_aops) >1:
                    raise ValueError("Multiple active AOPs found. Cannot proceed.")

                for active_aop_id in active_aops:
                     transaction.update(
                        table='AopHeaders',
                        columns=('aop_id', 'state'),
                        values=[(active_aop_id, 'eol')]
                    )
                transaction.update(
                    table='AopHeaders',
                    columns=('aop_id', 'state'),
                    values=[(int(aop_id), status)]
                )
            return True
        except Exception as e:
            print(f"Error setting AOP status: {e}")
            raise
    else:
        try:
            with db.batch() as batch:
                batch.update(
                        table='AopHeaders',
                        columns=('aop_id', 'state'),
                        values=[(int(aop_id), status)]
                    )
            return True
        except Exception as e:
            print(f"Error setting AOP status: {e}")
            raise

def create_aop_detail(aop_detail_data):
    db = get_db()
    try:
        with db.batch() as batch:
            aop_detail_id = generate_int64_id()
            batch.insert(
                table='AopDetails',
                columns=('aop_detail_id', 'aop_id', 'cost_center_code', 'amount'),
                values=[(
                    aop_detail_id,
                    int(aop_detail_data['aop_id']),
                    aop_detail_data['cost_center_code'],
                    aop_detail_data['amount']
                )]
            )
        return aop_detail_id
    except Exception as e:
        print(f"Error creating AOP detail: {e}")
        raise

def get_aop_details_by_aop_id(aop_id):
    db = get_db()
    details = []
    try:
        with db.snapshot() as snapshot:
            results = snapshot.read(
                table='AopDetails',
                columns=('aop_detail_id', 'aop_id', 'cost_center_code', 'amount'),
                keyset=spanner.KeySet(all_=True)
            )
            for row in results:
              if row[1] == int(aop_id):
                details.append(AopDetail(*row).to_dict())
        return details
    except Exception as e:
        print(f"Error getting AOP details: {e}")
        raise

def get_aop_detail_by_id(aop_detail_id):
    db = get_db()
    try:
        with db.snapshot() as snapshot:
            result = snapshot.read(
                table='AopDetails',
                columns=('aop_detail_id', 'aop_id', 'cost_center_code', 'amount'),
                keyset=spanner.KeySet(keys=[(int(aop_detail_id),)]),
                limit=1
            )
            rows = list(result)
            if rows:
                return AopDetail(*rows[0]).to_dict()
            return None
    except Exception as e:
        print(f"Error getting AOP detail by ID: {e}")
        raise

def update_aop_detail(aop_detail_id, aop_detail_data):
    db = get_db()
    try:
        with db.batch() as batch:
            batch.update(
                table='AopDetails',
                columns=('aop_detail_id', 'aop_id', 'cost_center_code', 'amount'),
                values=[(
                    int(aop_detail_id),
                    int(aop_detail_data['aop_id']),
                    aop_detail_data['cost_center_code'],
                    aop_detail_data['amount']
                )]
            )
        return True
    except Exception as e:
        print(f"Error updating AOP detail: {e}")
        raise

def delete_aop_detail(aop_detail_id):
    db = get_db()
    try:
        with db.batch() as batch:
            batch.delete(
                table='AopDetails',
                keyset=spanner.KeySet(keys=[(int(aop_detail_id),)])
            )
        return True
    except Exception as e:
        print(f"Error deleting AOP detail: {e}")
        raise

def get_aop_details_with_cost_center_names(aop_id):
    db = get_db()
    details = []
    try:
        with db.snapshot() as snapshot:
            results = snapshot.read(
                table='AopDetails',
                columns=('aop_detail_id', 'aop_id', 'cost_center_code', 'amount'),
                keyset=spanner.KeySet(all_=True)
            )
            for row in results:
                if row[1] == int(aop_id):
                    detail = AopDetail(*row).to_dict()
                    cost_center = cost_center_service.get_cost_center_by_code(detail['cost_center_code'])
                    detail['cost_center_name'] = cost_center['cost_center_name'] if cost_center else 'N/A'
                    details.append(detail)
        return details
    except Exception as e:
        print(f"Error getting AOP details with names: {e}")
        raise

def get_total_aop_detail_amount(aop_id):
    db = get_db()
    total_amount = 0
    try:
        with db.snapshot() as snapshot:
            results = snapshot.execute_sql(
                "SELECT SUM(amount) FROM AopDetails WHERE aop_id = @aop_id",
                params={"aop_id": int(aop_id)},
                param_types={"aop_id": spanner.param_types.INT64},
            )
            for row in results:
                total_amount = row[0] if row[0] is not None else 0
            return total_amount
    except Exception as e:
        print(f"Error calculating total AOP detail amount: {e}")
        raise

----- Content from: C:\Users\sachi\Desktop\budget-management-app\backend\services\budget_service.py -----
# backend/services/budget_service.py
import uuid
from google.cloud import spanner
from database import get_db
from models.budget import Budget

def create_budget(budget_data):
    """Creates a new budget in Spanner."""
    db = get_db()
    try:
        with db.batch() as batch:
            budget_id = str(uuid.uuid4())  # Generate a UUID for budget_id
            batch.insert(
                table='Budgets',
                columns=('budget_id', 'aop_id', 'project', 'description', 'amount', 'ldap'),
                values=[(
                    budget_id,
                    budget_data.get('aop_id'),
                    budget_data.get('project'),
                    budget_data.get('description'),
                    budget_data.get('amount'),
                    budget_data.get('ldap')
                )]
            )
        return budget_id  # Return the ID of the newly created budget
    except Exception as e:
        print(f"Error creating budget: {e}")  # Log the error
        raise  # Re-raise the exception to be handled by the API layer


def get_all_budgets():
    """Retrieves all budgets from Spanner."""
    db = get_db()
    budgets = []
    try:
        with db.snapshot() as snapshot:
            results = snapshot.read(
                table='Budgets',
                columns=('budget_id', 'aop_id', 'project', 'description', 'amount', 'ldap'),
                keyset=spanner.KeySet(all_=True)  # Retrieve all rows
            )
            for row in results:
                budget = Budget(*row) # Create a Budget object from the row data
                budgets.append(budget.to_dict()) # convert to dict
        return budgets
    except Exception as e:
        print(f"Error getting budgets: {e}")
        raise

def get_budget_by_id(budget_id):
    """Retrieves a single budget by its ID."""
    db = get_db()
    try:
        with db.snapshot() as snapshot:
            result = snapshot.read(
                table='Budgets',
                columns=('budget_id', 'aop_id', 'project', 'description', 'amount', 'ldap'),
                keyset=spanner.KeySet(keys=[(budget_id,)]),  # KeySet for a single key
                 limit=1
            )
            rows = list(result) # since we use limit=1
            if rows:
                return Budget(*rows[0]).to_dict() # return the dict, or you could return the object and do conversion in api.
            else:
                return None  # Or raise a custom exception like BudgetNotFound

    except Exception as e:
        print(f"Error getting budget by ID: {e}")
        raise



def update_budget(budget_id, budget_data):
    """Updates an existing budget in Spanner."""
    db = get_db()
    try:
        with db.batch() as batch:
            batch.update(
                table='Budgets',
                columns=('budget_id', 'aop_id', 'project', 'description', 'amount', 'ldap'),
                values=[(
                    budget_id,
                    budget_data.get('aop_id'),
                    budget_data.get('project'),
                    budget_data.get('description'),
                    budget_data.get('amount'),
                    budget_data.get('ldap')
                )]
            )
        return True # Return True for success
    except Exception as e:
        print(f"Error updating budget: {e}")
        raise


def delete_budget(budget_id):
    """Deletes a budget from Spanner."""
    db = get_db()
    try:
        with db.batch() as batch:
            batch.delete(
                table='Budgets',
                keyset=spanner.KeySet(keys=[(budget_id,)])  # Delete by primary key
            )

        return True  # successful deletion

    except Exception as e:
        print(f"Error deleting budget: {e}")
        raise

----- Content from: C:\Users\sachi\Desktop\budget-management-app\backend\services\cost_center_service.py -----
# backend/services/cost_center_service.py
from typing import List, Optional
from google.cloud import spanner
from database import get_db
from models.cost_center import CostCenter

class CostCenterService:
    @staticmethod
    def create_cost_center(cost_center_data: dict) -> str:
        try:
            cost_center = CostCenter.from_dict(cost_center_data)
            cost_center.validate()

            db = get_db()
            with db.batch() as batch:
                batch.insert(
                    table='CostCenters',
                    columns=('cost_center_code', 'cost_center_name'),
                    values=[(
                        cost_center.cost_center_code,
                        cost_center.cost_center_name
                    )]
                )
            return cost_center.cost_center_code

        except ValueError as e:
            raise ValueError(f"Invalid cost center data: {str(e)}")
        except Exception as e:
            raise Exception(f"Error creating cost center: {str(e)}")

    @staticmethod
    def get_all_cost_centers() -> List[dict]:
        try:
            db = get_db()
            cost_centers = []

            with db.snapshot() as snapshot:
                results = snapshot.read(
                    table='CostCenters',
                    columns=('cost_center_code', 'cost_center_name'),
                    keyset=spanner.KeySet(all_=True)
                )

                for row in results:
                    cost_center = CostCenter(*row)
                    cost_centers.append(cost_center.to_dict())

            return cost_centers

        except Exception as e:
            raise Exception(f"Error fetching cost centers: {str(e)}")

    @staticmethod
    def get_cost_center_by_code(cost_center_code: str) -> Optional[dict]:
        try:
            db = get_db()
            with db.snapshot() as snapshot:
                results = snapshot.read(
                    table='CostCenters',
                    columns=('cost_center_code', 'cost_center_name'),
                    keyset=spanner.KeySet(keys=[(cost_center_code,)]),
                    limit=1
                )

                rows = list(results)
                if rows:
                    cost_center = CostCenter(*rows[0])
                    return cost_center.to_dict()
                return None

        except Exception as e:
            raise Exception(f"Error fetching cost center: {str(e)}")

    @staticmethod
    def update_cost_center(cost_center_code: str, cost_center_data: dict) -> bool:
        try:
            cost_center = CostCenter.from_dict({
                'cost_center_code': cost_center_code,
                'cost_center_name': cost_center_data['cost_center_name']
            })
            cost_center.validate()

            db = get_db()
            with db.batch() as batch:
                batch.update(
                    table='CostCenters',
                    columns=('cost_center_code', 'cost_center_name'),
                    values=[(
                        cost_center_code,
                        cost_center_data['cost_center_name']
                    )]
                )
            return True

        except ValueError as e:
            raise ValueError(f"Invalid update data: {str(e)}")
        except Exception as e:
            raise Exception(f"Error updating cost center: {str(e)}")

    @staticmethod
    def delete_cost_center(cost_center_code: str) -> bool:
        try:
            db = get_db()

            with db.snapshot() as snapshot:
                employee_results = snapshot.read(
                    table='Employees',
                    columns=('ldap',),
                    keyset=spanner.KeySet(keys=[(cost_center_code,)]),
                    limit=1
                )

                if list(employee_results):
                    raise ValueError("Cannot delete cost center: Referenced by existing employees")
            with db.batch() as batch:
                batch.delete(
                    table='CostCenters',
                    keyset=spanner.KeySet(keys=[(cost_center_code,)])
                )
            return True

        except ValueError as e:
            raise ValueError(str(e))
        except Exception as e:
            raise Exception(f"Error deleting cost center: {str(e)}")

----- Content from: C:\Users\sachi\Desktop\budget-management-app\backend\services\employee_service.py -----


----- Content from: C:\Users\sachi\Desktop\budget-management-app\backend\services\org_hierarchy_service.py -----
# backend/services/org_hierarchy_service.py
import random
from google.cloud import spanner
from database import get_db
from services.user_service import UserService  # Import UserService


def generate_int64_id():
    return random.randint(-(2**63), (2**63)-1)

class OrgHierarchyService:
    @staticmethod
    def create_relationship(relationship_data: dict) -> int:
        """Creates a new manager-employee relationship."""
        db = get_db()
        try:
            with db.batch() as batch:
                relationship_id = generate_int64_id()
                batch.insert(
                    table='ManagerUserRelationships',
                    columns=('relationship_id', 'employee_ldap', 'manager_ldap'),
                    values=[(
                        relationship_id,
                        relationship_data['employee_ldap'],
                        relationship_data['manager_ldap']
                    )]
                )
            return relationship_id
        except Exception as e:
            raise Exception(f"Error creating relationship: {str(e)}")

    @staticmethod
    def get_all_relationships() -> list:
        """Retrieves all manager-employee relationships."""
        db = get_db()
        relationships = []
        try:
            with db.snapshot() as snapshot:
                results = snapshot.read(
                    table='ManagerUserRelationships',
                    columns=('relationship_id', 'employee_ldap', 'manager_ldap'),
                    keyset=spanner.KeySet(all_=True)
                )
                for row in results:
                    relationships.append({
                        'relationship_id': row[0],
                        'employee_ldap': row[1],
                        'manager_ldap': row[2]
                    })
            return relationships
        except Exception as e:
            raise Exception(f"Error fetching relationships: {str(e)}")

    @staticmethod
    def get_relationship_by_id(relationship_id: int) -> dict | None:
        """Retrieves a specific relationship by its ID."""
        db = get_db()
        try:
            with db.snapshot() as snapshot:
                results = snapshot.read(
                    table='ManagerUserRelationships',
                    columns=('relationship_id', 'employee_ldap', 'manager_ldap'),
                    keyset=spanner.KeySet(keys=[(int(relationship_id),)]),
                    limit=1
                )
                rows = list(results)
                if rows:
                    return {
                        'relationship_id': rows[0][0],
                        'employee_ldap': rows[0][1],
                        'manager_ldap': rows[0][2]
                    }
                return None
        except Exception as e:
            raise Exception(f"Error fetching relationship: {str(e)}")

    @staticmethod
    def get_relationships_by_manager(manager_ldap: str) -> list:
        """Retrieves all relationships where the given LDAP is the manager."""
        db = get_db()  # Corrected indentation
        relationships = []
        try:
            with db.snapshot() as snapshot:
                results = snapshot.read(
                    table='ManagerUserRelationships',
                    columns=('relationship_id', 'employee_ldap', 'manager_ldap'),
                    keyset=spanner.KeySet(all_=True)
                )
                for row in results:
                    if row[2] == manager_ldap:
                        relationships.append({
                            'relationship_id': row[0],
                            'employee_ldap': row[1],
                            'manager_ldap': row[2]
                        })
            return relationships
        except Exception as e:
            raise Exception(f"Error fetching relationships by manager: {str(e)}")

    @staticmethod
    def get_relationships_by_employee(employee_ldap: str) -> list:
        """Retrieves all relationships where the given LDAP is the employee."""
        db = get_db()
        relationships = []
        try:
            with db.snapshot() as snapshot:
                results = snapshot.read(
                    table='ManagerUserRelationships',
                    columns=('relationship_id', 'employee_ldap', 'manager_ldap'),
                    keyset=spanner.KeySet(all_=True)
                )
                for row in results:
                    if row[1] == employee_ldap:
                        relationships.append({
                            'relationship_id': row[0],
                            'employee_ldap': row[1],
                            'manager_ldap': row[2]
                        })
            return relationships
        except Exception as e:
            raise Exception(f"Error fetching relationships by employee: {str(e)}")


    @staticmethod
    def update_relationship(relationship_id: int, relationship_data: dict) -> bool:
        """Updates an existing manager-employee relationship."""
        db = get_db()
        try:
            with db.batch() as batch:
                batch.update(
                    table='ManagerUserRelationships',
                    columns=('relationship_id', 'employee_ldap', 'manager_ldap'),
                    values=[(
                        int(relationship_id),
                        relationship_data['employee_ldap'],
                        relationship_data['manager_ldap']
                    )]
                )
            return True
        except Exception as e:
            raise Exception(f"Error updating relationship: {str(e)}")

    @staticmethod
    def delete_relationship(relationship_id: int) -> bool:
        """Deletes a manager-employee relationship."""
        db = get_db()
        try:
            with db.batch() as batch:
                batch.delete(
                    table='ManagerUserRelationships',
                    keyset=spanner.KeySet(keys=[(int(relationship_id),)])
                )
            return True
        except Exception as e:
            raise Exception(f"Error deleting relationship: {str(e)}")
    
    @staticmethod
    def get_hierarchy_for_manager(manager_ldap: str) -> list:
        """
        Retrieves the reporting hierarchy for a given manager. This is a
        recursive function.
        """
        db = get_db()
        hierarchy = []
    
        try:
            with db.snapshot() as snapshot:
                results = snapshot.read(
                    table='ManagerUserRelationships',
                    columns=('employee_ldap', 'manager_ldap'),  # Need both ldap now
                    keyset=spanner.KeySet(all_=True)
                )
    
                # Build dictionary: manager -> list of direct reports
                direct_reports = {}
                for row in results:
                  if row[1] == manager_ldap:
                    if row[1] not in direct_reports:
                        direct_reports[row[1]] = []
                    direct_reports[row[1]].append(row[0])  # row[0] is employee_ldap
    
                # Recursively fetch subordinates for each direct report
                for manager_ldap_key in direct_reports:  # Iterate over managers
                   for employee_ldap in direct_reports[manager_ldap_key]:
                        employee_details = UserService.get_user_by_ldap(employee_ldap)
                        if employee_details:
                            employee_data = {
                                'ldap': employee_details['ldap'],
                                'first_name': employee_details['first_name'],
                                'last_name': employee_details['last_name'],
                                'subordinates': OrgHierarchyService.get_hierarchy_for_manager(employee_ldap)  # Recurse!
                            }
                            hierarchy.append(employee_data)
                return hierarchy
        except Exception as e:
            raise Exception(f"Error fetching hierarchy for manager: {str(e)}")

----- Content from: C:\Users\sachi\Desktop\budget-management-app\backend\services\purchase_order_service.py -----
# backend/services/purchase_order_service.py
from google.cloud import spanner
from database import get_db

def get_all_purchase_orders():
    db = get_db()
    purchase_orders = []
    try:
        with db.snapshot() as snapshot:
            results = snapshot.read(
                table='PurchaseOrders',
                columns=('po_id', 'po_number', 'po_line_number', 'requestor_ldap', 
                        'budget_id', 'purchase_item', 'amount', 'po_date'),
                keyset=spanner.KeySet(all_=True)
            )
            for row in results:
                purchase_orders.append({
                    'po_id': row[0],
                    'po_number': row[1],
                    'po_line_number': row[2],
                    'requestor_ldap': row[3],
                    'budget_id': row[4],
                    'purchase_item': row[5],
                    'amount': row[6],
                    'po_date': row[7].isoformat() if row[7] else None
                })
        return purchase_orders
    except Exception as e:
        print(f"Error getting purchase orders: {e}")
        raise

def get_purchase_order_by_id(po_id):
    db = get_db()
    try:
        with db.snapshot() as snapshot:
            result = snapshot.read(
                table='PurchaseOrders',
                columns=('po_id', 'po_number', 'po_line_number', 'requestor_ldap', 
                        'budget_id', 'purchase_item', 'amount', 'po_date'),
                keyset=spanner.KeySet(keys=[(int(po_id),)]),
                limit=1
            )
            rows = list(result)
            if rows:
                row = rows[0]
                return {
                    'po_id': row[0],
                    'po_number': row[1],
                    'po_line_number': row[2],
                    'requestor_ldap': row[3],
                    'budget_id': row[4],
                    'purchase_item': row[5],
                    'amount': row[6],
                    'po_date': row[7].isoformat() if row[7] else None
                }
            return None
    except Exception as e:
        print(f"Error getting purchase order by ID: {e}")
        raise

def get_purchase_orders_by_ldap(ldap):
    db = get_db()
    purchase_orders = []
    try:
        with db.snapshot() as snapshot:
            results = snapshot.read(
                table='PurchaseOrders',
                columns=('po_id', 'po_number', 'po_line_number', 'requestor_ldap', 
                        'budget_id', 'purchase_item', 'amount', 'po_date'),
                keyset=spanner.KeySet(all_=True)
            )
            for row in results:
                if row[3] == ldap:  # Check if requestor_ldap matches
                    purchase_orders.append({
                        'po_id': row[0],
                        'po_number': row[1],
                        'po_line_number': row[2],
                        'requestor_ldap': row[3],
                        'budget_id': row[4],
                        'purchase_item': row[5],
                        'amount': row[6],
                        'po_date': row[7].isoformat() if row[7] else None
                    })
        return purchase_orders
    except Exception as e:
        print(f"Error getting purchase orders by LDAP: {e}")
        raise

----- Content from: C:\Users\sachi\Desktop\budget-management-app\backend\services\user_service.py -----
# backend/services/user_service.py
from typing import List, Optional
from google.cloud import spanner
from database import get_db
from models.user import User

class UserService:
    @staticmethod
    def create_user(user_data: dict) -> str:
        try:
            user = User.from_dict(user_data)
            user.validate()

            db = get_db()
            with db.batch() as batch:
                batch.insert(
                    table='Users',
                    columns=('ldap', 'first_name', 'last_name', 'email', 'level', 'cost_center_code'),
                    values=[(
                        user.ldap,
                        user.first_name,
                        user.last_name,
                        user.email,
                        user.level,
                        user.cost_center_code
                    )]
                )
            return user.ldap

        except ValueError as e:
            raise ValueError(f"Invalid user data: {str(e)}")
        except Exception as e:
            raise Exception(f"Error creating user: {str(e)}")

    @staticmethod
    def get_all_users() -> List[dict]:
        try:
            db = get_db()
            users = []

            with db.snapshot() as snapshot:
                results = snapshot.read(
                    table='Users',
                    columns=('ldap', 'first_name', 'last_name', 'email', 'level', 'cost_center_code'),
                    keyset=spanner.KeySet(all_=True)
                )

                for row in results:
                    user = User(*row)
                    users.append(user.to_dict())

            return users

        except Exception as e:
            raise Exception(f"Error fetching users: {str(e)}")

    @staticmethod
    def get_user_by_ldap(ldap: str) -> Optional[dict]:
        try:
            db = get_db()
            with db.snapshot() as snapshot:
                results = snapshot.read(
                    table='Users',
                    columns=('ldap', 'first_name', 'last_name', 'email', 'level', 'cost_center_code'),
                    keyset=spanner.KeySet(keys=[(ldap,)]),
                    limit=1
                )

                rows = list(results)
                if rows:
                    user = User(*rows[0])
                    return user.to_dict()
                return None

        except Exception as e:
            raise Exception(f"Error fetching user: {str(e)}")

    @staticmethod
    def update_user(ldap: str, user_data: dict) -> bool:
        try:
            user = User.from_dict({
                'ldap': ldap,
                'first_name': user_data['first_name'],
                'last_name': user_data['last_name'],
                'email': user_data['email'],
                'level': user_data.get('level'),
                'cost_center_code': user_data.get('cost_center_code')
            })
            user.validate()

            db = get_db()
            with db.batch() as batch:
                batch.update(
                    table='Users',
                    columns=('ldap', 'first_name', 'last_name', 'email', 'level', 'cost_center_code'),
                    values=[(
                        ldap,
                        user_data['first_name'],
                        user_data['last_name'],
                        user_data['email'],
                        user_data.get('level'),
                        user_data.get('cost_center_code')
                    )]
                )
            return True

        except ValueError as e:
            raise ValueError(f"Invalid update data: {str(e)}")
        except Exception as e:
            raise Exception(f"Error updating user: {str(e)}")

    @staticmethod
    def delete_user(ldap: str) -> bool:
        try:
            db = get_db()
            with db.batch() as batch:
                batch.delete(
                    table='Users',
                    keyset=spanner.KeySet(keys=[(ldap,)])
                )
            return True

        except Exception as e:
            raise Exception(f"Error deleting user: {str(e)}")

----- Content from: C:\Users\sachi\Desktop\budget-management-app\backend\services\__init__.py -----


----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\index.html -----
<!DOCTYPE html>
<html ng-app="budgetApp">
<head>
    <title>Budget Management App</title>
    <base href="./">
    <link rel="stylesheet" href="styles.css">
	<link rel="stylesheet" href="app/navigation/navigation.component.css">
    <link rel="stylesheet" href="app/dashboard/dashboard.component.css">	
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>
	<navigation-bar ng-if="$root.isLoggedIn"></navigation-bar>
    <div ng-view></div>

    <!-- AngularJS Libraries -->
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular-route.min.js"></script>
    
    <!-- Application Core -->
    <script src="app/app.module.js"></script>
    <script src="app/app-routing.module.js"></script>

    <!-- Services -->
    <script src="app/services/budget.service.js"></script>
    <script src="app/services/aop.service.js"></script>
    <script src="app/services/cost-center.service.js"></script>

    <!-- Navigation -->
    <script src="app/navigation/navigation.component.js"></script>

    <!-- Components -->
    <script src="app/login/login.component.js"></script>
    <script src="app/dashboard/dashboard.component.js"></script>
    
    <!-- Budget Components -->
    <script src="app/budget/budget-list/budget-list.component.js"></script>
    <script src="app/budget/budget-create/budget-create.component.js"></script>
    
	<!-- Cost Center Components -->
	<script src="app/cost-center/cost-center.service.js"></script>
	<script src="app/cost-center/cost-center-list/cost-center-list.component.js"></script>	
	<script src="app/cost-center/cost-center-create/cost-center-create.component.js"></script>

	<!-- Purchase orders -->
	<script src="app/purchase-order/purchase-order.service.js"></script>
	<script src="app/purchase-order/purchase-order-list/purchase-order-list.component.js"></script>
	
	<!-- User Components -->
	<script src="app/user/user-list/user-list.component.js"></script>
	<script src="app/user/user-create/user-create.component.js"></script>

	<!-- Organization Hierarchy Components -->
	<script src="app/org-hierarchy/org-hierarchy.component.js"></script>
	<script src="app/org-hierarchy/org-hierarchy-create/org-hierarchy-create.component.js"></script>	
	
    <!-- AOP Components -->
    <script src="app/aop/aop-list/aop-list.component.js"></script>
    <script src="app/aop/aop-create/aop-create.component.js"></script>
    <script src="app/aop/aop-detail-list/aop-detail-list.component.js"></script>
    <script src="app/aop/aop-detail-create/aop-detail-create.component.js"></script>
</body>
</html>

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\styles.css -----
/* frontend/src/styles.css */

/* General Styles */
body {
    font-family: sans-serif;
    background-color: #f0f2f5;
    margin: 0;
}

/* Login Styles */
body.login-page {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
}

.login-container {
    background-color: white;
    padding: 40px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    width: 300px;
    text-align: center;
}

.login-header {
    margin-bottom: 30px;
}

.logo {
    max-width: 150px;
    height: auto;
    margin-bottom: 20px;
}

.login-form label {
    display: block;
    margin-bottom: 5px;
    text-align: left;
}

.login-form input[type="password"] {
    width: 100%;
    padding: 10px;
    margin-bottom: 15px;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
}

.login-form button {
    background-color: #4CAF50;
    color: white;
    padding: 10px 15px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    width: 100%;
}

.login-form button:hover {
    background-color: #45a049;
}

.error-message {
    color: red;
    margin-top: 10px;
}

/* Budget List Styles */
.budget-list-container {
    max-width: 1200px;
    margin: 20px auto;
    padding: 20px;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.budget-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 1px solid #eee;
}

.budget-title {
    font-size: 24px;
    color: #333;
    margin: 0;
}

.create-button {
    background-color: #4CAF50;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
}

.create-button:hover {
    background-color: #45a049;
}

/* Filter Section */
.filter-section {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 15px;
    margin-bottom: 20px;
    padding: 15px;
    background-color: #f8f9fa;
    border-radius: 4px;
    border: 1px solid #eee;
}

.filter-input {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    box-sizing: border-box;
}

.filter-input:focus {
    border-color: #4CAF50;
    outline: none;
}

/* Budget Table */
.budget-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
}

.budget-table th {
    background-color: #f8f9fa;
    padding: 12px 15px;
    text-align: left;
    font-weight: 600;
    color: #333;
    border-bottom: 2px solid #ddd;
    cursor: pointer;
}

.budget-table th:hover {
    background-color: #eee;
}

.budget-table td {
    padding: 12px 15px;
    border-bottom: 1px solid #eee;
}

.budget-table tr:hover {
    background-color: #f5f5f5;
}

/* Action Buttons */
.action-buttons {
    display: flex;
    gap: 8px;
}

.edit-button, .delete-button {
    padding: 6px 12px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 4px;
}

.edit-button {
    background-color: #4CAF50;
    color: white;
}

.edit-button:hover {
    background-color: #45a049;
}

.delete-button {
    background-color: #dc3545;
    color: white;
}

.delete-button:hover {
    background-color: #c82333;
}

/* Loading State */
.loading-spinner {
    text-align: center;
    padding: 40px;
    color: #666;
}

.spinner {
    border: 4px solid #f3f3f3;
    border-top: 4px solid #4CAF50;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
    margin: 0 auto 15px;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Empty State */
.empty-state {
    text-align: center;
    padding: 40px;
    color: #666;
}

.empty-state i {
    font-size: 48px;
    color: #ddd;
    margin-bottom: 15px;
}

/* Pagination */
.pagination {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-top: 20px;
    border-top: 1px solid #eee;
}

.pagination-info {
    color: #666;
}

.pagination-buttons {
    display: flex;
    gap: 10px;
}

.pagination-button {
    padding: 8px 16px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background-color: white;
    cursor: pointer;
}

.pagination-button:hover:not(:disabled) {
    background-color: #f5f5f5;
}

.pagination-button:disabled {
    background-color: #f5f5f5;
    cursor: not-allowed;
    opacity: 0.7;
}

/* Responsive Design */
@media (max-width: 768px) {
    .budget-list-container {
        margin: 10px;
        padding: 15px;
    }

    .budget-header {
        flex-direction: column;
        gap: 15px;
        align-items: stretch;
    }

    .filter-section {
        grid-template-columns: 1fr;
    }

    .budget-table {
        display: block;
        overflow-x: auto;
    }

    .pagination {
        flex-direction: column;
        gap: 15px;
        align-items: center;
    }

    .action-buttons {
        flex-direction: column;
    }
}

/* Sort Icons */
.sort-icon {
    margin-left: 5px;
    opacity: 0.5;
}

th:hover .sort-icon {
    opacity: 1;
}

/* Budget Form Styles */
.budget-form-container {
    max-width: 800px;
    margin: 20px auto;
    padding: 20px;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.budget-form-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 25px;
    padding-bottom: 15px;
    border-bottom: 1px solid #eee;
}

.back-button {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px 16px;
    background-color: #f8f9fa;
    border: 1px solid #ddd;
    border-radius: 4px;
    color: #333;
    cursor: pointer;
    transition: all 0.2s ease;
}

.back-button:hover {
    background-color: #e9ecef;
}

.budget-form {
    padding: 20px 0;
}

.form-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 20px;
    margin-bottom: 20px;
}

.form-group {
    margin-bottom: 15px;
}

.form-group.full-width {
    grid-column: 1 / -1;
}

.form-group label {
    display: block;
    margin-bottom: 8px;
    color: #333;
    font-weight: 500;
}

.required {
    color: #dc3545;
    margin-left: 4px;
}

.form-input {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    box-sizing: border-box;
    font-size: 14px;
    transition: border-color 0.2s ease;
}

.form-input:focus {
    border-color: #4CAF50;
    outline: none;
    box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.1);
}

textarea.form-input {
    resize: vertical;
    min-height: 100px;
}

.form-actions {
    display: flex;
    justify-content: flex-end;
    gap: 15px;
    margin-top: 25px;
    padding-top: 20px;
    border-top: 1px solid #eee;
}

.cancel-button {
    padding: 10px 20px;
    background-color: #f8f9fa;
    border: 1px solid #ddd;
    border-radius: 4px;
    color: #333;
    cursor: pointer;
    transition: all 0.2s ease;
}

.cancel-button:hover {
    background-color: #e9ecef;
}

.save-button {
    padding: 10px 20px;
    background-color: #4CAF50;
    border: none;
    border-radius: 4px;
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
    transition: all 0.2s ease;
}

.save-button:hover:not(:disabled) {
    background-color: #45a049;
}

.save-button:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
}

.error-message {
    background-color: #fff3f3;
    color: #dc3545;
    padding: 12px;
    border-radius: 4px;
    margin: 15px 0;
    border-left: 4px solid #dc3545;
}

/* Organization Hierarchy Styles */
.hierarchy-list {
    padding: 20px;
}

.hierarchy-level {
    list-style: none;
    padding-left: 30px;
    position: relative;
}

.hierarchy-level li {
    position: relative;
    margin: 15px 0;
    padding-left: 20px;
}

.hierarchy-level li::before {
    content: '';
    position: absolute;
    left: -15px;
    top: 50%;
    width: 30px;
    height: 1px;
    background: #ccc;
}

.hierarchy-level li::after {
    content: '';
    position: absolute;
    left: -15px;
    top: -15px;
    bottom: 50%;
    width: 1px;
    background: #ccc;
}

.hierarchy-level > li:first-child::after {
    top: 50%;
}

.hierarchy-level > li:last-child::after {
    bottom: auto;
    height: 50%;
}

.manager-info, .employee-info, .subordinate-info {
    background: white;
    padding: 10px 15px;
    border-radius: 4px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    display: flex;
    align-items: center;
    gap: 10px;
}

.manager-info { background: #e3f2fd; }
.employee-info { background: #f5f5f5; }
.subordinate-info { background: #fff; }

.manager-info i, .employee-info i, .subordinate-info i {
    color: #666;
}

/* Responsive Design */
@media (max-width: 768px) {
    .budget-form-container {
        margin: 10px;
        padding: 15px;
    }

    .budget-form-header {
        flex-direction: column;
        gap: 15px;
        align-items: stretch;
        text-align: center;
    }

    .form-grid {
        grid-template-columns: 1fr;
    }

    .form-actions {
        flex-direction: column-reverse;
    }

    .save-button, .cancel-button {
        width: 100%;
        justify-content: center;
    }
}

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\app-routing.module.js -----
// frontend/src/app/app-routing.module.js
angular.module('budgetApp')
  .config(['$routeProvider', '$locationProvider', function($routeProvider, $locationProvider) {
    $locationProvider.hashPrefix('');

    $routeProvider
      .when('/', {
        redirectTo: '/login'
      })
      .when('/login', {
        template: '<login></login>'
      })
      .when('/dashboard', {
        template: '<dashboard></dashboard>'
      })
      // Budget Routes
      .when('/budget-list', {
        template: '<budget-list></budget-list>'
      })
      .when('/budget-create', {
        template: '<budget-create></budget-create>'
      })
      .when('/budget-create/:budgetId', {
        template: '<budget-create></budget-create>'
      })
      // User Management Routes
      .when('/users', {
        template: '<user-list></user-list>'
      })
      .when('/users/create', {
        template: '<user-create></user-create>'
      })
      .when('/users/edit/:userId', {
        template: '<user-create></user-create>'
      })
	  // Cost Centers
	  .when('/cost-centers', {
	    template: '<cost-center-list></cost-center-list>'
	  })
	  .when('/cost-centers/create', {
	    template: '<cost-center-create></cost-center-create>'
	  })
	  .when('/cost-centers/edit/:costCenterCode', {
	    template: '<cost-center-create></cost-center-create>'
	  })
      // Organization Hierarchy Routes
      .when('/org-hierarchy', {
        template: '<org-hierarchy></org-hierarchy>'
      })
      .when('/org-hierarchy/create', { // Add org hierarchy routes
        template: '<org-hierarchy-create></org-hierarchy-create>'
      })
      .when('/org-hierarchy/edit/:relationshipId', {
        template: '<org-hierarchy-create></org-hierarchy-create>'
      })
      // AOP Routes
      .when('/aop-headers', {
        template: '<aop-list></aop-list>'
      })
      .when('/aop-headers/create', {
        template: '<aop-create></aop-create>'
      })
      .when('/aop-headers/edit/:aopId', {
        template: '<aop-create></aop-create>'
      })
      .when('/aop-details', {
        template: '<aop-detail-list></aop-detail-list>'
      })
      .when('/aop-details/create/:aopId', {
        template: '<aop-detail-create></aop-detail-create>'
      })
      .when('/aop-details/edit/:aopDetailId', {
        template: '<aop-detail-create></aop-detail-create>'
      })
      // Purchase Order Routes
      .when('/purchase-orders', {
        template: '<purchase-order-list></purchase-order-list>'
      })
      .when('/purchase-orders/create', {
        template: '<purchase-order-create></purchase-order-create>'
      })
      .when('/purchase-orders/edit/:poId', {
        template: '<purchase-order-create></purchase-order-create>'
      })
      // Report Routes
      .when('/reports/organization', {
        template: '<org-report></org-report>'
      })
      .when('/reports/budget', {
        template: '<budget-report></budget-report>'
      })
      .otherwise({
        redirectTo: '/login'
      });
  }])
  .run(['$rootScope', '$location', function($rootScope, $location) {
    $rootScope.$on('$routeChangeStart', function(event, next, current) {
      if (next && next.$$route && next.$$route.originalPath !== '/login' && !$rootScope.isLoggedIn) {
        event.preventDefault();
        $location.path('/login');
      }
    });
  }]);

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\app.component.html -----
<!-- frontend/src/app/app.component.html -->
<h1>{{ $ctrl.message }}</h1>

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\app.component.js -----
// frontend/src/app/app.component.js
angular.module('budgetApp')
  .component('appRoot', {
    templateUrl: 'app/app.component.html',
    controller: function() {
      this.message = 'Hello from Sachin!';
    }
  });

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\app.module.js -----
// frontend/src/app/app.module.js
"use strict";

angular.module('budgetApp', ['ngRoute'])
  .service('budgetService', ['$http', function($http) {
    const apiUrl = 'http://localhost:5000/budgets';
    const config = {
      headers: {
        'Content-Type': 'application/json'
      },
      withCredentials: true
    };

    this.getAllBudgets = function() {
      return $http.get(apiUrl, config)
        .then(response => response.data)
        .catch(error => {
          console.error("Error fetching budgets:", error);
          throw error;
        });
    };

    this.getBudget = function(budgetId) {
      return $http.get(`${apiUrl}/${budgetId}`, config)
        .then(response => response.data)
        .catch(error => {
          console.error(`Error fetching budget ${budgetId}:`, error);
          throw error;
        });
    };

    this.createBudget = function(budgetData) {
      return $http.post(apiUrl, budgetData, config)
        .then(response => response.data)
        .catch(error => {
          console.error("Error creating budget:", error);
          throw error;
        });
    };

    this.updateBudget = function(budgetId, budgetData) {
      return $http.put(`${apiUrl}/${budgetId}`, budgetData, config)
        .then(response => response.data)
        .catch(error => {
          console.error(`Error updating budget ${budgetId}:`, error);
          throw error;
        });
    };

    this.deleteBudget = function(budgetId) {
      return $http.delete(`${apiUrl}/${budgetId}`, config)
        .then(response => response.data)
        .catch(error => {
          console.error(`Error deleting budget ${budgetId}:`, error);
          throw error;
        });
    };
  }])
  .service('aopService', ['$http', function($http) {
    const apiUrl = 'http://localhost:5000/aop';
    const config = {
      headers: {
        'Content-Type': 'application/json'
      },
      withCredentials: true
    };

    this.getAllAopHeaders = function() {
      return $http.get(`${apiUrl}/headers`, config)
        .then(response => response.data)
        .catch(error => {
          console.error("Error fetching AOP Headers:", error);
          throw error;
        });
    };

    this.getAopHeader = function(aopId) {
      return $http.get(`${apiUrl}/headers/${aopId}`, config)
        .then(response => response.data)
        .catch(error => {
          console.error("Error fetching AOP Header:", error);
          throw error;
        });
    };

    this.createAopHeader = function(aopData) {
      return $http.post(`${apiUrl}/headers`, aopData, config)
        .then(response => response.data)
        .catch(error => {
          console.error("Error creating AOP Header:", error);
          throw error;
        });
    };

    this.updateAopHeader = function(aopId, aopData) {
      return $http.put(`${apiUrl}/headers/${aopId}`, aopData, config)
        .then(response => response.data)
        .catch(error => {
          console.error("Error updating AOP Header:", error);
          throw error;
        });
    };

    this.deleteAopHeader = function(aopId) {
      return $http.delete(`${apiUrl}/headers/${aopId}`, config)
        .then(response => response.data)
        .catch(error => {
          console.error("Error deleting AOP Header:", error);
          throw error;
        });
    };

    this.setAopHeaderStatus = function(aopId, status) {
      return $http.put(`${apiUrl}/headers/${aopId}/status`, { status: status }, config)
        .then(response => response.data)
        .catch(error => {
          console.error("Error updating AOP Header status:", error);
          throw error;
        });
    };

    this.getAopDetailsByAopId = function(aopId) {
      return $http.get(`${apiUrl}/details/by-aop/${aopId}/with-names`, config)
        .then(response => response.data)
        .catch(error => {
          console.error("Error getting AOP Details:", error);
          throw error;
        });
    };

    this.getAopDetail = function(aopDetailId) {
      return $http.get(`${apiUrl}/details/${aopDetailId}`, config)
        .then(response => response.data)
        .catch(error => {
          console.error("Error getting AOP Detail:", error);
          throw error;
        });
    };

    this.createAopDetail = function(aopDetailData) {
      return $http.post(`${apiUrl}/details`, aopDetailData, config)
        .then(response => response.data)
        .catch(error => {
          console.error("Error creating AOP Detail:", error);
          throw error;
        });
    };

    this.updateAopDetail = function(aopDetailId, aopDetailData) {
      return $http.put(`${apiUrl}/details/${aopDetailId}`, aopDetailData, config)
        .then(response => response.data)
        .catch(error => {
          console.error("Error updating AOP Detail:", error);
          throw error;
        });
    };

    this.deleteAopDetail = function(aopDetailId) {
      return $http.delete(`${apiUrl}/details/${aopDetailId}`, config)
        .then(response => response.data)
        .catch(error => {
          console.error("Error deleting AOP Detail:", error);
          throw error;
        });
    };

    this.getTotalAopDetailAmount = function(aopId) {
      return $http.get(`${apiUrl}/details/total-amount/${aopId}`, config)
        .then(response => response.data)
        .catch(error => {
          console.error("Error getting total AOP Detail amount:", error);
          throw error;
        });
    };
  }])
  .service('userService', ['$http', function($http) {
    const apiUrl = 'http://localhost:5000/users';
    const config = {
      headers: {
        'Content-Type': 'application/json'
      },
      withCredentials: true
    };

    this.getAllUsers = function() {
      return $http.get(apiUrl, config)
        .then(response => response.data)
        .catch(error => {
          console.error("Error fetching users:", error);
          throw error;
        });
    };

    this.getUser = function(ldap) {
      return $http.get(`${apiUrl}/${ldap}`, config)
        .then(response => response.data)
        .catch(error => {
          console.error("Error fetching user:", error);
          throw error;
        });
    };

    this.createUser = function(userData) {
      return $http.post(apiUrl, userData, config)
        .then(response => response.data)
        .catch(error => {
          console.error("Error creating user:", error);
          throw error;
        });
    };

    this.updateUser = function(ldap, userData) {
      return $http.put(`${apiUrl}/${ldap}`, userData, config)
        .then(response => response.data)
        .catch(error => {
          console.error("Error updating user:", error);
          throw error;
        });
    };

    this.deleteUser = function(ldap) {
      return $http.delete(`${apiUrl}/${ldap}`, config)
        .then(response => response.data)
        .catch(error => {
          console.error("Error deleting user:", error);
          throw error;
        });
    };
  }])
  .service('purchaseOrderService', ['$http', function($http) {
    const apiUrl = 'http://localhost:5000/purchase-orders';
    const config = {
      headers: {
        'Content-Type': 'application/json'
      },
      withCredentials: true
    };

    this.getAllPurchaseOrders = function() {
        return $http.get(apiUrl, config)
            .then(response => response.data)
            .catch(error => {
                console.error("Error fetching purchase orders:", error);
                throw error;
            });
    };

    this.getPurchaseOrder = function(poId) {
        return $http.get(`${apiUrl}/${poId}`, config)
            .then(response => response.data)
            .catch(error => {
                console.error("Error fetching purchase order:", error);
                throw error;
            });
    };

    this.getPurchaseOrdersByLdap = function(ldap) {
        // For now, return mock data since the backend isn't implemented
        return Promise.resolve([
            {
                po_id: 1,
                po_number: 'PO-2024-001',
                po_line_number: 1,
                requestor_ldap: ldap,
                budget_id: 1,
                purchase_item: 'Office Supplies',
                amount: 1500.00,
                po_date: new Date('2024-02-15')
            },
            {
                po_id: 2,
                po_number: 'PO-2024-002',
                po_line_number: 1,
                requestor_ldap: ldap,
                budget_id: 2,
                purchase_item: 'IT Equipment',
                amount: 5000.00,
                po_date: new Date('2024-02-16')
            }
        ]);
    };
  }])
  .service('costCenterService', ['$http', function($http) {
    const apiUrl = 'http://localhost:5000/costcenters';
    const config = {
      headers: {
        'Content-Type': 'application/json'
      },
      withCredentials: true
    };

    this.getAllCostCenters = function() {
      return $http.get(apiUrl, config)
        .then(response => response.data)
        .catch(error => {
          console.error("Error fetching cost centers:", error);
          throw error;
        });
    };
  }])
  .service('orgHierarchyService', ['$http', function($http) { //Add org hierarchy service
    const apiUrl = 'http://localhost:5000/org-hierarchy';
    const config = {
      headers: {
        'Content-Type': 'application/json'
      },
      withCredentials: true
    };

    this.createRelationship = function(relationshipData) {
      return $http.post(`${apiUrl}/relationships`, relationshipData, config)
        .then(response => response.data);
    };

    this.getAllRelationships = function() {
      return $http.get(`${apiUrl}/relationships`, config)
        .then(response => response.data);
    };

    this.getRelationshipById = function(relationshipId) {
      return $http.get(`${apiUrl}/relationships/${relationshipId}`, config)
        .then(response => response.data);
    };

    this.getRelationshipsByManager = function(managerLdap) {
      return $http.get(`${apiUrl}/relationships/manager/${managerLdap}`, config)
        .then(response => response.data);
    };

    this.getRelationshipsByEmployee = function(employeeLdap) {
      return $http.get(`${apiUrl}/relationships/employee/${employeeLdap}`, config)
        .then(response => response.data);
    };

    this.updateRelationship = function(relationshipId, relationshipData) {
      return $http.put(`${apiUrl}/relationships/${relationshipId}`, relationshipData, config)
        .then(response => response.data);
    };

    this.deleteRelationship = function(relationshipId) {
      return $http.delete(`${apiUrl}/relationships/${relationshipId}`, config)
        .then(response => response.data);
    };

    this.getHierarchyForManager = function(managerLdap) {
      return $http.get(`${apiUrl}/manager/${managerLdap}`, config)
        .then(response => response.data);
    };
  }]);
  

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\aop\aop.service.js -----
// frontend/src/app/aop/aop.service.js
angular.module('budgetApp')
  .service('aopService', ['$http', function($http) {
    const apiUrl = 'http://localhost:5000/aop'; // Base URL for AOP API

    // --- AOP Header Methods ---
    this.getAllAopHeaders = function() {
      return $http.get(`${apiUrl}/headers`)
        .then(response => response.data);
    };

    this.getAopHeader = function(aopId) {
      return $http.get(`${apiUrl}/headers/${aopId}`)
        .then(response => response.data);
    };

    this.createAopHeader = function(aopData) {
      return $http.post(`${apiUrl}/headers`, aopData)
        .then(response => response.data);
    };

    this.updateAopHeader = function(aopId, aopData) {
      return $http.put(`${apiUrl}/headers/${aopId}`, aopData)
        .then(response => response.data);
    };

    this.deleteAopHeader = function(aopId) {
      return $http.delete(`${apiUrl}/headers/${aopId}`)
        .then(response => response.data);
    };

    this.setAopHeaderStatus = function(aopId, status) {
        return $http.put(`${apiUrl}/headers/${aopId}/status`, { status: status })
          .then(response => response.data);
      };


    // --- AOP Detail Methods ---

    this.getAopDetailsByAopId = function(aopId) {
      return $http.get(`${apiUrl}/details/by-aop/${aopId}/with-names`)
        .then(response => response.data);
    };

    this.getAopDetail = function(aopDetailId) {
      return $http.get(`${apiUrl}/details/${aopDetailId}`)
        .then(response => response.data);
    };

    this.createAopDetail = function(aopDetailData) {
      return $http.post(`${apiUrl}/details`, aopDetailData)
        .then(response => response.data);
    };

    this.updateAopDetail = function(aopDetailId, aopDetailData) {
      return $http.put(`${apiUrl}/details/${aopDetailId}`, aopDetailData)
        .then(response => response.data);
    };

    this.deleteAopDetail = function(aopDetailId) {
      return $http.delete(`${apiUrl}/details/${aopDetailId}`)
        .then(response => response.data);
    };

    this.getTotalAopDetailAmount = function (aopId) {
        return $http.get(`${apiUrl}/details/total-amount/${aopId}`)
        .then(response => response.data);
    };
  }]);

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\aop\aop-create\aop-create.component.html -----
<!-- frontend/src/app/aop/aop-create/aop-create.component.html -->
<div class="budget-form-container">
    <div class="budget-form-header">
        <h2 class="budget-title">{{ $ctrl.isEditMode ? 'Edit AOP Header' : 'Create AOP Header' }}</h2>
        <button type="button" ng-click="$ctrl.goBack()" class="back-button">
            <i class="fas fa-arrow-left"></i> Back to List
        </button>
    </div>

    <form ng-submit="$ctrl.saveAopHeader()" class="budget-form" name="aopHeaderForm">
        <div class="form-grid">
            <div class="form-group">
                <label for="aop_name">AOP Name <span class="required">*</span></label>
                <input type="text" id="aop_name" name="aop_name" ng-model="$ctrl.aopHeader.aop_name" required class="form-input">
            </div>
            <div class="form-group">
                <label for="total_amount">Total Amount <span class="required">*</span></label>
                <input type="number" id="total_amount" name="total_amount" ng-model="$ctrl.aopHeader.total_amount" required step="0.01" min="0" class="form-input">
            </div>
            <div class="form-group" ng-if="$ctrl.isEditMode">
              <label for="status">Status</label>
                <select id="status" name="status" ng-model="$ctrl.aopHeader.status" required class="form-input">
                    <option value="draft">Draft</option>
                    <option value="active">Active</option>
                    <option value="eol">EOL</option>
                </select>
            </div>
        </div>

        <div ng-if="$ctrl.error" class="error-message">
            {{ $ctrl.error }}
        </div>

        <div class="form-actions">
            <button type="button" ng-click="$ctrl.goBack()" class="cancel-button">Cancel</button>
            <button type="submit" class="save-button" ng-disabled="aopHeaderForm.$invalid || $ctrl.saving">
                <i class="fas" ng-class="{'fa-spinner fa-spin': $ctrl.saving, 'fa-save': !$ctrl.saving}"></i>
                {{ $ctrl.saving ? 'Saving...' : 'Save' }}
            </button>
        </div>
    </form>
</div>

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\aop\aop-create\aop-create.component.js -----
// frontend/src/app/aop/aop-create/aop-create.component.js
"use strict";

angular.module('budgetApp')
  .component('aopCreate', {
    templateUrl: 'app/aop/aop-create/aop-create.component.html',
    controller: ['aopService', '$routeParams', '$location', '$scope', 
      function(aopService, $routeParams, $location, $scope) {
        const ctrl = this;
        
        ctrl.aopHeader = {
          aop_name: '',
          total_amount: null,
          status: 'draft'
        };
        
        ctrl.aopId = $routeParams.aopId;
        ctrl.isEditMode = !!ctrl.aopId;
        ctrl.error = null;
        ctrl.saving = false;

        ctrl.$onInit = function() {
          if (ctrl.isEditMode) {
            ctrl.loadAopHeader();
          }
        };

        ctrl.loadAopHeader = function() {
          aopService.getAopHeader(ctrl.aopId)
            .then(header => {
              ctrl.aopHeader = header;
            })
            .catch(error => {
              ctrl.error = 'Failed to load AOP Header details.';
              console.error('Error loading AOP header:', error);
            });
        };

        ctrl.saveAopHeader = function() {
          ctrl.error = null;
          ctrl.saving = true;

          const savePromise = ctrl.isEditMode ?
            aopService.updateAopHeader(ctrl.aopId, ctrl.aopHeader) :
            aopService.createAopHeader(ctrl.aopHeader);

          savePromise
            .then(() => {
              $location.path('/aop-headers');
            })
            .catch(error => {
              ctrl.error = 'Failed to save AOP Header.';
              console.error('Error saving AOP header:', error);
            })
            .finally(() => {
              ctrl.saving = false;
              if (!$scope.$$phase) {
                $scope.$apply();
              }
            });
        };

        ctrl.goBack = function() {
          $location.path('/aop-headers');
        };
      }
    ]
  });

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\aop\aop-detail-create\aop-detail-create.component.html -----
<!-- frontend/src/app/aop/aop-detail-create/aop-detail-create.component.html -->
<div class="budget-form-container">
    <div class="budget-form-header">
        <h2 class="budget-title">{{ $ctrl.isEditMode ? 'Edit AOP Detail' : 'Create AOP Detail' }}</h2>
        <button type="button" ng-click="$ctrl.goBack()" class="back-button">
            <i class="fas fa-arrow-left"></i> Back to List
        </button>
    </div>

    <form ng-submit="$ctrl.saveAopDetail()" class="budget-form" name="aopDetailForm">
        <div class="form-grid">
             <div class="form-group" ng-if="!$ctrl.isEditMode">
                <label for="aop_id">AOP ID <span class="required">*</span></label>
                <input type="text" id="aop_id" name="aop_id" ng-model="$ctrl.aopDetail.aop_id" required class="form-input" ng-disabled="$ctrl.isEditMode" >
            </div>
            <div class="form-group">
                <label for="cost_center_code">Cost Center <span class="required">*</span></label>
                <select id="cost_center_code" name="cost_center_code" ng-model="$ctrl.aopDetail.cost_center_code" required class="form-input" ng-disabled="$ctrl.loadingCostCenters">
                    <option value="">Select a Cost Center</option>
                    <option ng-repeat="costCenter in $ctrl.costCenters" value="{{costCenter.cost_center_code}}">{{costCenter.cost_center_name}} ({{costCenter.cost_center_code}})</option>
                </select>
            </div>
            <div class="form-group">
                <label for="amount">Amount <span class="required">*</span></label>
                <input type="number" id="amount" name="amount" ng-model="$ctrl.aopDetail.amount" required step="0.01" min="0" class="form-input">
            </div>
        </div>

        <div ng-if="$ctrl.error" class="error-message">
            {{ $ctrl.error }}
        </div>

        <div class="form-actions">
            <button type="button" ng-click="$ctrl.goBack()" class="cancel-button">Cancel</button>
            <button type="submit" class="save-button" ng-disabled="aopDetailForm.$invalid || $ctrl.saving">
                <i class="fas" ng-class="{'fa-spinner fa-spin': $ctrl.saving, 'fa-save': !$ctrl.saving}"></i>
                {{ $ctrl.saving ? 'Saving...' : 'Save' }}
            </button>
        </div>
    </form>
</div>

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\aop\aop-detail-create\aop-detail-create.component.js -----
// frontend/src/app/aop/aop-detail-create/aop-detail-create.component.js
"use strict";

angular.module('budgetApp')
  .component('aopDetailCreate', {
    templateUrl: 'app/aop/aop-detail-create/aop-detail-create.component.html',
    controller: ['aopService', 'costCenterService', '$routeParams', '$location', '$scope',
      function(aopService, costCenterService, $routeParams, $location, $scope) {
        const ctrl = this;
        
        ctrl.aopDetail = {
          aop_id: $routeParams.aopId || '',
          cost_center_code: '',
          amount: null
        };
        
        ctrl.aopDetailId = $routeParams.aopDetailId;
        ctrl.isEditMode = !!ctrl.aopDetailId;
        ctrl.costCenters = [];
        ctrl.loadingCostCenters = true;
        ctrl.error = null;
        ctrl.saving = false;

        ctrl.$onInit = function() {
          ctrl.loadCostCenters();
          if (ctrl.isEditMode) {
            ctrl.loadAopDetail();
          }
        };

        ctrl.loadCostCenters = function() {
          ctrl.loadingCostCenters = true;
          costCenterService.getAllCostCenters()
            .then(costCenters => {
              ctrl.costCenters = costCenters;
            })
            .catch(error => {
              ctrl.error = 'Failed to load cost centers.';
              console.error('Error loading cost centers:', error);
            })
            .finally(() => {
              ctrl.loadingCostCenters = false;
              if (!$scope.$$phase) {
                $scope.$apply();
              }
            });
        };

        ctrl.loadAopDetail = function() {
          aopService.getAopDetail(ctrl.aopDetailId)
            .then(detail => {
              ctrl.aopDetail = detail;
            })
            .catch(error => {
              ctrl.error = 'Failed to load AOP Detail details.';
              console.error('Error loading AOP detail:', error);
            });
        };

        ctrl.saveAopDetail = function() {
          ctrl.error = null;
          ctrl.saving = true;

          const savePromise = ctrl.isEditMode ?
            aopService.updateAopDetail(ctrl.aopDetailId, ctrl.aopDetail) :
            aopService.createAopDetail(ctrl.aopDetail);

          savePromise
            .then(() => {
              $location.path('/aop-details');
            })
            .catch(error => {
              ctrl.error = 'Failed to save AOP Detail.';
              console.error('Error saving AOP detail:', error);
            })
            .finally(() => {
              ctrl.saving = false;
              if (!$scope.$$phase) {
                $scope.$apply();
              }
            });
        };

        ctrl.goBack = function() {
          $location.path('/aop-details');
        };
      }
    ]
  });

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\aop\aop-detail-list\aop-detail-list.component.html -----
<!-- frontend/src/app/aop/aop-detail-list/aop-detail-list.component.html -->
<div class="budget-list-container">
    <div class="budget-header">
        <h2 class="budget-title">AOP Details</h2>
         <select ng-model="$ctrl.selectedAopId" ng-change="$ctrl.loadAopDetails()" ng-disabled="$ctrl.loadingHeaders" class="filter-input">
            <option value="">Select an AOP</option>
            <option ng-repeat="header in $ctrl.aopHeaders" value="{{header.aop_id}}">{{header.aop_name}}</option>
        </select>
        <button ng-click="$ctrl.goToCreateAopDetail()" class="create-button" ng-disabled="!$ctrl.selectedAopId">
            <i class="fas fa-plus"></i> Add AOP Detail
        </button>
    </div>

    <div ng-if="$ctrl.loading || $ctrl.loadingHeaders" class="loading-spinner">
        <div class="spinner"></div>
        <p>{{ $ctrl.loadingHeaders ? 'Loading AOP Headers...' : 'Loading AOP Details...' }}</p>
    </div>

    <div ng-if="$ctrl.error" class="error-message">
        <p>{{$ctrl.error}}</p>
    </div>

    <div class="budget-header" ng-if="!$ctrl.loading && !$ctrl.loadingHeaders && $ctrl.selectedAopId">
      <h4>Total Allocated: ${{$ctrl.totalDetailAmount | number:2}}</h4>
    </div>

    <table ng-if="!$ctrl.loading && !$ctrl.loadingHeaders && $ctrl.aopDetails.length > 0" class="budget-table">
        <thead>
            <tr>
                <th>Cost Center Code</th>
                <th>Cost Center Name</th>
                <th>Amount</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <tr ng-repeat="detail in $ctrl.aopDetails">
                <td>{{detail.cost_center_code}}</td>
                <td>{{detail.cost_center_name}}</td>
                <td>${{detail.amount | number:2}}</td>
                <td>
                    <div class="action-buttons">
                        <button ng-click="$ctrl.editAopDetail(detail.aop_detail_id)" class="edit-button">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button ng-click="$ctrl.deleteAopDetail(detail.aop_detail_id)" class="delete-button">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
     <div ng-if="!$ctrl.loading && !$ctrl.loadingHeaders && !$ctrl.error && $ctrl.aopDetails.length === 0" class="empty-state">
        <i class="fas fa-folder-open"></i>
        <p>No AOP Details found for the selected AOP.</p>
    </div>
</div>

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\aop\aop-detail-list\aop-detail-list.component.js -----
// frontend/src/app/aop/aop-detail-list/aop-detail-list.component.js
"use strict";

angular.module('budgetApp')
  .component('aopDetailList', {
    templateUrl: 'app/aop/aop-detail-list/aop-detail-list.component.html',
    controller: ['aopService', 'costCenterService', '$location', '$scope',
      function(aopService, costCenterService, $location, $scope) {
        const ctrl = this;
        ctrl.aopHeaders = [];
        ctrl.aopDetails = [];
        ctrl.selectedAopId = '';
        ctrl.loading = false;
        ctrl.loadingHeaders = true;
        ctrl.error = null;
        ctrl.totalDetailAmount = 0;

        ctrl.$onInit = function() {
          ctrl.loadAopHeaders();
        };

        ctrl.loadAopHeaders = function() {
          ctrl.loadingHeaders = true;
          aopService.getAllAopHeaders()
            .then(headers => {
              ctrl.aopHeaders = headers;
            })
            .catch(error => {
              ctrl.error = "Failed to load AOP Headers.";
              console.error('Error loading AOP headers:', error);
            })
            .finally(() => {
              ctrl.loadingHeaders = false;
              if (!$scope.$$phase) {
                $scope.$apply();
              }
            });
        };

        ctrl.loadAopDetails = function() {
          if (!ctrl.selectedAopId) {
            ctrl.aopDetails = [];
            ctrl.totalDetailAmount = 0;
            return;
          }

          ctrl.loading = true;
          ctrl.error = null;

          Promise.all([
            aopService.getAopDetailsByAopId(ctrl.selectedAopId),
            aopService.getTotalAopDetailAmount(ctrl.selectedAopId)
          ])
            .then(([details, totalAmount]) => {
              ctrl.aopDetails = details;
              ctrl.totalDetailAmount = totalAmount.total_amount;
            })
            .catch(error => {
              ctrl.error = "Failed to load AOP Details.";
              console.error('Error loading AOP details:', error);
            })
            .finally(() => {
              ctrl.loading = false;
              if (!$scope.$$phase) {
                $scope.$apply();
              }
            });
        };

        ctrl.goToCreateAopDetail = function() {
          $location.path(`/aop-details/create/${ctrl.selectedAopId}`);
        };

        ctrl.editAopDetail = function(aopDetailId) {
          $location.path(`/aop-details/edit/${aopDetailId}`);
        };

        ctrl.deleteAopDetail = function(aopDetailId) {
          if (confirm('Are you sure you want to delete this AOP Detail?')) {
            aopService.deleteAopDetail(aopDetailId)
              .then(() => {
                ctrl.aopDetails = ctrl.aopDetails.filter(detail => detail.aop_detail_id !== aopDetailId);
                ctrl.loadAopDetails();
              })
              .catch(error => {
                console.error('Error deleting AOP detail:', error);
                alert('Failed to delete AOP Detail.');
              });
          }
        };
      }
    ]
  });

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\aop\aop-list\aop-list.component.html -----
<!-- frontend/src/app/aop/aop-list/aop-list.component.html -->
<div class="budget-list-container">
    <div class="budget-header">
        <h2 class="budget-title">AOP Headers</h2>
        <button ng-click="$ctrl.goToCreateAopHeader()" class="create-button">
            <i class="fas fa-plus"></i> Add AOP Header
        </button>
    </div>

    <div ng-if="$ctrl.loading" class="loading-spinner">
        <div class="spinner"></div>
        <p>Loading AOP Headers...</p>
    </div>

    <div ng-if="$ctrl.error" class="error-message">
        <p>{{$ctrl.error}}</p>
    </div>

    <table ng-if="!$ctrl.loading && $ctrl.aopHeaders.length > 0" class="budget-table">
        <thead>
            <tr>
                <th>AOP Name</th>
                <th>Total Amount</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <tr ng-repeat="header in $ctrl.aopHeaders">
                <td>{{header.aop_name}}</td>
                <td>${{header.total_amount | number:2}}</td>
                <td>{{header.status}}</td>
                <td>
                    <div class="action-buttons">
                        <button ng-click="$ctrl.editAopHeader(header.aop_id)" class="edit-button">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button ng-click="$ctrl.deleteAopHeader(header.aop_id)" class="delete-button">
                            <i class="fas fa-trash"></i>
                        </button>
                        <button ng-click="$ctrl.setAopStatus(header.aop_id, 'active')" class="edit-button" ng-disabled="header.status === 'active'">
                           Set Active
                        </button>
                         <button ng-click="$ctrl.setAopStatus(header.aop_id, 'eol')" class="delete-button" ng-disabled="header.status === 'eol'">
                           Set EOL
                        </button>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
    <div ng-if="!$ctrl.loading && !$ctrl.error && $ctrl.aopHeaders.length === 0" class="empty-state">
        <i class="fas fa-folder-open"></i>
        <h3>No AOP Headers found</h3>
    </div>
</div>

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\aop\aop-list\aop-list.component.js -----
// frontend/src/app/aop/aop-list/aop-list.component.js
"use strict";

angular.module('budgetApp')
  .component('aopList', {
    templateUrl: 'app/aop/aop-list/aop-list.component.html',
    controller: ['aopService', '$location', '$scope', function(aopService, $location, $scope) {
      const ctrl = this;
      ctrl.aopHeaders = [];
      ctrl.loading = true;
      ctrl.error = null;

      ctrl.$onInit = function() {
        ctrl.loadAopHeaders();
      };

      ctrl.loadAopHeaders = function() {
        ctrl.loading = true;
        ctrl.error = null;
        aopService.getAllAopHeaders()
          .then(headers => {
            ctrl.aopHeaders = headers;
          })
          .catch(error => {
            ctrl.error = "Failed to load AOP Headers. Please try again later.";
            console.error('Error loading AOP headers:', error);
          })
          .finally(() => {
            ctrl.loading = false;
            if (!$scope.$$phase) {
              $scope.$apply();
            }
          });
      };

      ctrl.goToCreateAopHeader = function() {
        $location.path('/aop-headers/create');
      };

      ctrl.editAopHeader = function(aopId) {
        $location.path(`/aop-headers/edit/${aopId}`);
      };

      ctrl.deleteAopHeader = function(aopId) {
        if (confirm('Are you sure you want to delete this AOP Header?')) {
          aopService.deleteAopHeader(aopId)
            .then(() => {
              ctrl.aopHeaders = ctrl.aopHeaders.filter(header => header.aop_id !== aopId);
              if (!$scope.$$phase) {
                $scope.$apply();
              }
            })
            .catch(error => {
              console.error('Error deleting AOP header:', error);
              alert('Failed to delete AOP Header.');
            });
        }
      };

      ctrl.setAopStatus = function(aopId, status) {
        aopService.setAopHeaderStatus(aopId, status)
          .then(() => {
            ctrl.loadAopHeaders();
          })
          .catch(error => {
            console.error('Error setting AOP status:', error);
            alert(`Error setting status to ${status}`);
          });
      };
    }]
  });

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\budget\budget.service.js -----
// frontend/src/app/budget/budget.service.js
angular.module('budgetApp')
  .service('budgetService', ['$http', function($http) {
    const apiUrl = 'http://localhost:5000/budgets';
    
    // Common config for all requests
    const config = {
      headers: {
        'Content-Type': 'application/json'
      },
      withCredentials: true
    };

    this.getAllBudgets = function() {
      return $http.get(apiUrl, config)
        .then(response => response.data)
        .catch(error => {
          console.error("Error fetching budgets:", error);
          throw error;
        });
    };

    this.getBudget = function(budgetId) {
      return $http.get(`${apiUrl}/${budgetId}`, config)
        .then(response => response.data)
        .catch(error => {
          console.error(`Error fetching budget ${budgetId}:`, error);
          throw error;
        });
    };

    this.createBudget = function(budgetData) {
      return $http.post(apiUrl, budgetData, config)
        .then(response => response.data)
        .catch(error => {
          console.error("Error creating budget:", error);
          throw error;
        });
    };

    this.updateBudget = function(budgetId, budgetData) {
      return $http.put(`${apiUrl}/${budgetId}`, budgetData, config)
        .then(response => response.data)
        .catch(error => {
          console.error(`Error updating budget ${budgetId}:`, error);
          throw error;
        });
    };

    this.deleteBudget = function(budgetId) {
      return $http.delete(`${apiUrl}/${budgetId}`, config)
        .then(response => response.data)
        .catch(error => {
          console.error(`Error deleting budget ${budgetId}:`, error);
          throw error;
        });
    };
  }]);

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\budget\budget-create\budget-create.component.html -----
<div class="budget-form-container">
    <div class="budget-form-header">
        <h2 class="budget-title">{{ $ctrl.isEditMode ? 'Edit Budget' : 'Create New Budget' }}</h2>
        <button type="button" ng-click="$ctrl.goBack()" class="back-button">
            <i class="fas fa-arrow-left"></i> Back to List
        </button>
    </div>

    <form ng-submit="$ctrl.saveBudget()" class="budget-form" name="budgetForm">
        <div class="form-grid">
            <!-- Project -->
            <div class="form-group">
                <label for="project">Project Name <span class="required">*</span></label>
                <input type="text" 
                       id="project" 
                       name="project"
                       ng-model="$ctrl.budget.project" 
                       required
                       class="form-input">
            </div>

            <!-- AOP ID -->
            <div class="form-group">
                <label for="aop_id">AOP ID <span class="required">*</span></label>
                <input type="text" 
                       id="aop_id" 
                       name="aop_id"
                       ng-model="$ctrl.budget.aop_id"
                       required
                       class="form-input">
            </div>

            <!-- Amount -->
            <div class="form-group">
                <label for="amount">Amount ($) <span class="required">*</span></label>
                <input type="number" 
                       id="amount" 
                       name="amount"
                       ng-model="$ctrl.budget.amount" 
                       required
                       step="0.01"
                       min="0"
                       class="form-input">
            </div>

            <!-- LDAP -->
            <div class="form-group">
                <label for="ldap">LDAP <span class="required">*</span></label>
                <input type="text" 
                       id="ldap" 
                       name="ldap"
                       ng-model="$ctrl.budget.ldap" 
                       required
                       class="form-input">
            </div>
        </div>

        <!-- Description -->
        <div class="form-group full-width">
            <label for="description">Description</label>
            <textarea id="description" 
                     name="description"
                     ng-model="$ctrl.budget.description"
                     rows="4"
                     class="form-input"></textarea>
        </div>

        <!-- Error Message -->
        <div ng-if="$ctrl.error" class="error-message">
            {{ $ctrl.error }}
        </div>

        <!-- Form Actions -->
        <div class="form-actions">
            <button type="button" 
                    ng-click="$ctrl.goBack()" 
                    class="cancel-button">
                Cancel
            </button>
            <button type="submit" 
                    class="save-button"
                    ng-disabled="budgetForm.$invalid || $ctrl.saving">
                <i class="fas" ng-class="{'fa-spinner fa-spin': $ctrl.saving, 'fa-save': !$ctrl.saving}"></i>
                {{ $ctrl.saving ? 'Saving...' : 'Save Budget' }}
            </button>
        </div>
    </form>
</div>

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\budget\budget-create\budget-create.component.js -----
// frontend/src/app/budget/budget-create/budget-create.component.js
"use strict";
angular.module('budgetApp')
    .component('budgetCreate', {
        templateUrl: 'app/budget/budget-create/budget-create.component.html',
        controller: ['budgetService', '$routeParams', '$location', '$scope',
            function (budgetService, $routeParams, $location, $scope) {
                const ctrl = this;

                ctrl.budget = {
                    project: '',
                    description: '',
                    amount: null,
                    ldap: '',
                    aop_id: ''
                };
                ctrl.budgetId = $routeParams.budgetId;
                ctrl.isEditMode = !!ctrl.budgetId;
                ctrl.error = null;
                ctrl.saving = false;

                ctrl.$onInit = function () {
                    if (ctrl.isEditMode) {
                        loadBudget();
                    }
                };

                function loadBudget() {
                    ctrl.loading = true;
                    budgetService.getBudget(ctrl.budgetId)
                        .then(budget => {
                            ctrl.budget = budget;
                            // $scope.$apply(); // Removed
                        })
                        .catch(error => {
                            ctrl.error = 'Failed to load budget details. Please try again.';
                            console.error('Error loading budget:', error);
                            // $scope.$apply(); // Removed
                        })
                        .finally(() => {
                            ctrl.loading = false;
                            // $scope.$apply(); // Removed
                        });
                }

                ctrl.saveBudget = function () {
                    ctrl.error = null;
                    ctrl.saving = true;

                    const savePromise = ctrl.isEditMode ?
                        budgetService.updateBudget(ctrl.budgetId, ctrl.budget) :
                        budgetService.createBudget(ctrl.budget);

                    savePromise
                        .then(() => {
                            $location.path('/budget-list');
                            // $scope.$apply(); // Removed
                        })
                        .catch(error => {
                            ctrl.error = 'Failed to save budget. Please check all required fields and try again.';
                            console.error('Error saving budget:', error);
                            //  $scope.$apply(); // Removed
                        })
                        .finally(() => {
                            ctrl.saving = false;
                            //  $scope.$apply(); // Removed
                        });
                };

                ctrl.goBack = function() {
                    console.log('Going back to budget list');
                    $location.path('/budget-list');
                    // $scope.$apply(); // Removed
                };
            }
        ]
    });

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\budget\budget-list\budget-list.component.html -----
<div class="budget-list-container">
    <!-- Header Section -->
    <div class="budget-header">
        <h2 class="budget-title">Budget Management</h2>
        <button ng-click="$ctrl.goToCreateBudget()" class="create-button">
            <i class="fas fa-plus"></i> Create New Budget
        </button>
    </div>

    <!-- Search and Filter Section -->
    <div class="filter-section">
        <!-- Search -->
        <div>
            <input type="text" 
                   ng-model="$ctrl.searchQuery" 
                   ng-change="$ctrl.filterBudgets()"
                   placeholder="Search projects..."
                   class="filter-input">
        </div>
        
        <!-- AOP Filter -->
        <div>
            <select ng-model="$ctrl.selectedAop" 
                    ng-change="$ctrl.filterBudgets()"
                    class="filter-input">
                <option value="">All AOPs</option>
                <option ng-repeat="aop in $ctrl.uniqueAops" value="{{aop}}">{{aop}}</option>
            </select>
        </div>
        
        <!-- Amount Range -->
        <div class="amount-range">
            <input type="number" 
                   ng-model="$ctrl.minAmount" 
                   ng-change="$ctrl.filterBudgets()"
                   placeholder="Min Amount"
                   class="filter-input">
            <input type="number" 
                   ng-model="$ctrl.maxAmount" 
                   ng-change="$ctrl.filterBudgets()"
                   placeholder="Max Amount"
                   class="filter-input">
        </div>
    </div>

    <!-- Loading State -->
    <div ng-if="$ctrl.loading" class="loading-spinner">
        <div class="spinner"></div>
        <p>Loading budgets...</p>
    </div>

    <!-- Error State -->
    <div ng-if="$ctrl.error" class="error-message">
        <p>{{$ctrl.error}}</p>
    </div>

    <!-- Empty State -->
    <div ng-if="!$ctrl.loading && !$ctrl.error && $ctrl.filteredBudgets.length === 0" class="empty-state">
        <i class="fas fa-folder-open"></i>
        <h3>No budgets found</h3>
        <p>Try adjusting your search or filters</p>
    </div>

    <!-- Budget Table -->
    <table ng-if="!$ctrl.loading && $ctrl.filteredBudgets.length > 0" class="budget-table">
        <thead>
            <tr>
                <th ng-repeat="header in ['Project', 'AOP ID', 'Description', 'Amount', 'LDAP', 'Actions']" 
                    ng-click="$ctrl.sortBy(header.toLowerCase())">
                    {{header}}
                    <span ng-if="$ctrl.sortField === header.toLowerCase()">
                        <i class="fas" ng-class="{'fa-sort-up': !$ctrl.sortReverse, 'fa-sort-down': $ctrl.sortReverse}"></i>
                    </span>
                </th>
            </tr>
        </thead>
        <tbody>
            <tr ng-repeat="budget in $ctrl.filteredBudgets">
                <td>{{budget.project}}</td>
                <td>{{budget.aop_id}}</td>
                <td>{{budget.description}}</td>
                <td>${{budget.amount | number:2}}</td>
                <td>{{budget.ldap}}</td>
                <td>
                    <div class="action-buttons">
                        <button ng-click="$ctrl.editBudget(budget.budget_id)" class="edit-button">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button ng-click="$ctrl.deleteBudget(budget.budget_id)" class="delete-button">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>

    <!-- Pagination -->
    <div ng-if="$ctrl.filteredBudgets.length > 0" class="pagination">
        <div class="pagination-info">
            Showing {{($ctrl.currentPage - 1) * $ctrl.pageSize + 1}} to 
            {{Math.min($ctrl.currentPage * $ctrl.pageSize, $ctrl.filteredBudgets.length)}} of 
            {{$ctrl.filteredBudgets.length}} entries
        </div>
        <div class="pagination-buttons">
            <button ng-click="$ctrl.currentPage = $ctrl.currentPage - 1" 
                    ng-disabled="$ctrl.currentPage === 1"
                    class="pagination-button">
                Previous
            </button>
            <button ng-click="$ctrl.currentPage = $ctrl.currentPage + 1" 
                    ng-disabled="$ctrl.currentPage * $ctrl.pageSize >= $ctrl.filteredBudgets.length"
                    class="pagination-button">
                Next
            </button>
        </div>
    </div>
</div>

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\budget\budget-list\budget-list.component.js -----
// frontend/src/app/budget/budget-list/budget-list.component.js
"use strict";
angular.module('budgetApp')
  .component('budgetList', {
    templateUrl: 'app/budget/budget-list/budget-list.component.html',
    controller: ['budgetService', '$location', '$scope', function(budgetService, $location, $scope) {
      const ctrl = this;

      ctrl.budgets = [];
      ctrl.filteredBudgets = [];
      ctrl.loading = true;
      ctrl.error = null;
      ctrl.searchQuery = '';
      ctrl.selectedAop = '';
      ctrl.minAmount = null;
      ctrl.maxAmount = null;
      ctrl.sortField = 'project';
      ctrl.sortReverse = false;
      ctrl.currentPage = 1;
      ctrl.pageSize = 10;
      ctrl.uniqueAops = [];

      ctrl.$onInit = function() {
        loadBudgets();
      };

      function loadBudgets() {
        ctrl.loading = true;
        ctrl.error = null;

        budgetService.getAllBudgets()
          .then(function(budgets) {
            ctrl.budgets = budgets;
            ctrl.uniqueAops = [...new Set(budgets.map(b => b.aop_id))].filter(Boolean);
            ctrl.filterBudgets();
          })
          .catch(function(error) {
            ctrl.error = "Failed to load budgets. Please try again later.";
            console.error('Error loading budgets:', error);
          })
          .finally(function() {
            ctrl.loading = false;
             // $scope.$apply(); // Removed
          });
      }

      ctrl.filterBudgets = function() {
        ctrl.filteredBudgets = ctrl.budgets.filter(budget => {
          const matchesSearch = !ctrl.searchQuery ||
            budget.project.toLowerCase().includes(ctrl.searchQuery.toLowerCase()) ||
            budget.description.toLowerCase().includes(ctrl.searchQuery.toLowerCase());
          
          const matchesAop = !ctrl.selectedAop ||
            budget.aop_id === ctrl.selectedAop;

          const matchesAmount = (!ctrl.minAmount || budget.amount >= ctrl.minAmount) &&
            (!ctrl.maxAmount || budget.amount <= ctrl.maxAmount);

          return matchesSearch && matchesAop && matchesAmount;
        });

        ctrl.sortBudgets();
        ctrl.currentPage = 1;
      };

      ctrl.sortBudgets = function() {
        ctrl.filteredBudgets.sort((a, b) => {
          let aVal = a[ctrl.sortField];
          let bVal = b[ctrl.sortField];

          if (typeof aVal === 'string') {
            aVal = aVal.toLowerCase();
            bVal = bVal.toLowerCase();
          }

          if (aVal < bVal) return ctrl.sortReverse ? 1 : -1;
          if (aVal > bVal) return ctrl.sortReverse ? -1 : 1;
          return 0;
        });
      };

      ctrl.sortBy = function(field) {
        if (ctrl.sortField === field) {
          ctrl.sortReverse = !ctrl.sortReverse;
        } else {
          ctrl.sortField = field;
          ctrl.sortReverse = false;
        }
        ctrl.sortBudgets();
      };

      ctrl.goToCreateBudget = function() {
        $location.path('/budget-create');
         // $scope.$apply(); // Removed
      };

      ctrl.editBudget = function(budgetId) {
        $location.path('/budget-create/' + budgetId);
         // $scope.$apply(); // Removed
      };

      ctrl.deleteBudget = function(budgetId) {
        if (confirm('Are you sure you want to delete this budget?')) {
          budgetService.deleteBudget(budgetId)
            .then(function() {
              ctrl.budgets = ctrl.budgets.filter(budget => budget.budget_id !== budgetId);
              ctrl.filterBudgets();
               // $scope.$apply(); // Removed
            })
            .catch(function(error) {
              console.error('Error deleting budget:', error);
              alert('Failed to delete budget.');
            });
        }
      };
    }]
  });

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\cost-center\cost-center.service.js -----
// frontend/src/app/cost-center/cost-center.service.js
angular.module('budgetApp')
.service('costCenterService', ['$http', function($http) {
    const apiUrl = 'http://localhost:5000/costcenters';
    const config = {
      headers: {
        'Content-Type': 'application/json'
      },
      withCredentials: true
    };
    
    this.getAllCostCenters = function() {
        return $http.get(apiUrl, config)
            .then(response => response.data)
            .catch(error => {
                console.error("Error fetching cost centers:", error);
                throw error;
            });
    };

    this.getCostCenter = function(costCenterCode) {
        return $http.get(`${apiUrl}/${costCenterCode}`, config)
            .then(response => response.data)
            .catch(error => {
                console.error("Error fetching cost center:", error);
                throw error;
            });
    };

    this.createCostCenter = function(costCenterData) {
        return $http.post(apiUrl, costCenterData, config)
            .then(response => response.data)
            .catch(error => {
                console.error("Error creating cost center:", error);
                throw error;
            });
    };

    this.updateCostCenter = function(costCenterCode, costCenterData) {
        return $http.put(`${apiUrl}/${costCenterCode}`, costCenterData, config)
            .then(response => response.data)
            .catch(error => {
                console.error("Error updating cost center:", error);
                throw error;
            });
    };

    this.deleteCostCenter = function(costCenterCode) {
        return $http.delete(`${apiUrl}/${costCenterCode}`, config)
            .then(response => response.data)
            .catch(error => {
                console.error("Error deleting cost center:", error);
                throw error;
            });
    };
}]);

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\cost-center\cost-center-create\cost-center-create.component.html -----
<!-- frontend/src/app/cost-center/cost-center-create/cost-center-create.component.html -->
<div class="budget-form-container">
    <div class="budget-form-header">
        <h2 class="budget-title">{{ $ctrl.isEditMode ? 'Edit Cost Center' : 'Create Cost Center' }}</h2>
        <button type="button" ng-click="$ctrl.goBack()" class="back-button">
            <i class="fas fa-arrow-left"></i> Back to List
        </button>
    </div>

    <form ng-submit="$ctrl.saveCostCenter()" class="budget-form" name="costCenterForm">
        <div class="form-grid">
            <div class="form-group">
                <label for="cost_center_code">Cost Center Code <span class="required">*</span></label>
                <input type="text" 
                       id="cost_center_code" 
                       name="cost_center_code"
                       ng-model="$ctrl.costCenter.cost_center_code" 
                       required
                       ng-disabled="$ctrl.isEditMode"
                       ng-pattern="/^[a-zA-Z0-9]+$/"
                       maxlength="50"
                       class="form-input">
                <small class="form-text text-muted" ng-if="costCenterForm.cost_center_code.$error.pattern">
                    Code must be alphanumeric
                </small>
            </div>

            <div class="form-group">
                <label for="cost_center_name">Cost Center Name <span class="required">*</span></label>
                <input type="text" 
                       id="cost_center_name" 
                       name="cost_center_name"
                       ng-model="$ctrl.costCenter.cost_center_name" 
                       required
                       maxlength="255"
                       class="form-input">
            </div>
        </div>

        <div ng-if="$ctrl.error" class="error-message">
            {{ $ctrl.error }}
        </div>

        <div class="form-actions">
            <button type="button" ng-click="$ctrl.goBack()" class="cancel-button">Cancel</button>
            <button type="submit" 
                    class="save-button"
                    ng-disabled="costCenterForm.$invalid || $ctrl.saving">
                <i class="fas" ng-class="{'fa-spinner fa-spin': $ctrl.saving, 'fa-save': !$ctrl.saving}"></i>
                {{ $ctrl.saving ? 'Saving...' : 'Save Cost Center' }}
            </button>
        </div>
    </form>
</div>

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\cost-center\cost-center-create\cost-center-create.component.js -----
// frontend/src/app/cost-center/cost-center-create/cost-center-create.component.js
"use strict";

angular.module('budgetApp')
  .component('costCenterCreate', {
    templateUrl: 'app/cost-center/cost-center-create/cost-center-create.component.html',
    controller: ['costCenterService', '$routeParams', '$location', '$scope',
      function(costCenterService, $routeParams, $location, $scope) {
        const ctrl = this;
        
        ctrl.costCenter = {
          cost_center_code: '',
          cost_center_name: ''
        };
        
        ctrl.costCenterCode = $routeParams.costCenterCode;
        ctrl.isEditMode = !!ctrl.costCenterCode;
        ctrl.error = null;
        ctrl.saving = false;

        ctrl.$onInit = function() {
          if (ctrl.isEditMode) {
            loadCostCenter();
          }
        };

        function loadCostCenter() {
          ctrl.loading = true;
          costCenterService.getCostCenter(ctrl.costCenterCode)
            .then(costCenter => {
              ctrl.costCenter = costCenter;
            })
            .catch(error => {
              ctrl.error = 'Failed to load cost center details.';
              console.error('Error loading cost center:', error);
            })
            .finally(() => {
              ctrl.loading = false;
              if (!$scope.$$phase) {
                $scope.$apply();
              }
            });
        }

        ctrl.saveCostCenter = function() {
          if (!isValid()) {
            return;
          }

          ctrl.error = null;
          ctrl.saving = true;

          const savePromise = ctrl.isEditMode ?
            costCenterService.updateCostCenter(ctrl.costCenterCode, ctrl.costCenter) :
            costCenterService.createCostCenter(ctrl.costCenter);

          savePromise
            .then(() => {
              $location.path('/cost-centers');
            })
            .catch(error => {
              ctrl.error = error.data?.error || 'Failed to save cost center.';
              console.error('Error saving cost center:', error);
            })
            .finally(() => {
              ctrl.saving = false;
              if (!$scope.$$phase) {
                $scope.$apply();
              }
            });
        };

        function isValid() {
          // Basic validation
          if (!ctrl.costCenter.cost_center_code || !ctrl.costCenter.cost_center_name) {
            ctrl.error = 'All fields are required.';
            return false;
          }

          // Code validation
          if (!/^[a-zA-Z0-9]+$/.test(ctrl.costCenter.cost_center_code)) {
            ctrl.error = 'Cost center code must be alphanumeric.';
            return false;
          }

          if (ctrl.costCenter.cost_center_code.length > 50) {
            ctrl.error = 'Cost center code cannot exceed 50 characters.';
            return false;
          }

          // Name validation
          if (ctrl.costCenter.cost_center_name.length > 255) {
            ctrl.error = 'Cost center name cannot exceed 255 characters.';
            return false;
          }

          return true;
        }

        ctrl.goBack = function() {
          $location.path('/cost-centers');
        };
      }
    ]
  });

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\cost-center\cost-center-list\cost-center-list.component.html -----
<!-- frontend/src/app/cost-center/cost-center-list/cost-center-list.component.html -->
<div class="budget-list-container">
    <div class="budget-header">
        <h2 class="budget-title">Cost Centers</h2>
        <button ng-click="$ctrl.goToCreateCostCenter()" class="create-button">
            <i class="fas fa-plus"></i> Add Cost Center
        </button>
    </div>

    <div ng-if="$ctrl.loading" class="loading-spinner">
        <div class="spinner"></div>
        <p>Loading cost centers...</p>
    </div>

    <div ng-if="$ctrl.error" class="error-message">
        <p>{{$ctrl.error}}</p>
    </div>

    <div class="filter-section">
        <input type="text" 
               ng-model="$ctrl.searchQuery" 
               ng-change="$ctrl.filterCostCenters()"
               placeholder="Search cost centers..."
               class="filter-input">
    </div>

    <table ng-if="!$ctrl.loading && $ctrl.filteredCostCenters.length > 0" class="budget-table">
        <thead>
            <tr>
                <th ng-click="$ctrl.sortBy('cost_center_code')">
                    Code
                    <i class="fas" ng-class="{'fa-sort-up': !$ctrl.sortReverse, 'fa-sort-down': $ctrl.sortReverse}" 
                       ng-if="$ctrl.sortField === 'cost_center_code'"></i>
                </th>
                <th ng-click="$ctrl.sortBy('cost_center_name')">
                    Name
                    <i class="fas" ng-class="{'fa-sort-up': !$ctrl.sortReverse, 'fa-sort-down': $ctrl.sortReverse}" 
                       ng-if="$ctrl.sortField === 'cost_center_name'"></i>
                </th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <tr ng-repeat="costCenter in $ctrl.filteredCostCenters">
                <td>{{costCenter.cost_center_code}}</td>
                <td>{{costCenter.cost_center_name}}</td>
                <td>
                    <div class="action-buttons">
                        <button ng-click="$ctrl.editCostCenter(costCenter.cost_center_code)" class="edit-button">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button ng-click="$ctrl.deleteCostCenter(costCenter.cost_center_code)" class="delete-button">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>

    <div ng-if="!$ctrl.loading && !$ctrl.error && $ctrl.filteredCostCenters.length === 0" class="empty-state">
        <i class="fas fa-folder-open"></i>
        <p>No cost centers found</p>
    </div>
</div>

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\cost-center\cost-center-list\cost-center-list.component.js -----
// frontend/src/app/cost-center/cost-center-list/cost-center-list.component.js
"use strict";

angular.module('budgetApp')
  .component('costCenterList', {
    templateUrl: 'app/cost-center/cost-center-list/cost-center-list.component.html',
    controller: ['costCenterService', '$location', '$scope',
      function(costCenterService, $location, $scope) {
        const ctrl = this;
        
        ctrl.costCenters = [];
        ctrl.filteredCostCenters = [];
        ctrl.loading = true;
        ctrl.error = null;
        ctrl.searchQuery = '';
        ctrl.sortField = 'cost_center_code';
        ctrl.sortReverse = false;

        ctrl.$onInit = function() {
          loadCostCenters();
        };

        function loadCostCenters() {
          ctrl.loading = true;
          ctrl.error = null;

          costCenterService.getAllCostCenters()
            .then(costCenters => {
              ctrl.costCenters = costCenters;
              ctrl.filterCostCenters();
            })
            .catch(error => {
              ctrl.error = "Failed to load cost centers. Please try again later.";
              console.error('Error loading cost centers:', error);
            })
            .finally(() => {
              ctrl.loading = false;
              if (!$scope.$$phase) {
                $scope.$apply();
              }
            });
        }

        ctrl.filterCostCenters = function() {
          ctrl.filteredCostCenters = ctrl.costCenters.filter(costCenter => {
            const searchLower = ctrl.searchQuery.toLowerCase();
            return !ctrl.searchQuery ||
              costCenter.cost_center_code.toLowerCase().includes(searchLower) ||
              costCenter.cost_center_name.toLowerCase().includes(searchLower);
          });
          ctrl.sortCostCenters();
        };

        ctrl.sortCostCenters = function() {
          ctrl.filteredCostCenters.sort((a, b) => {
            let aVal = a[ctrl.sortField].toLowerCase();
            let bVal = b[ctrl.sortField].toLowerCase();
            return ctrl.sortReverse ? bVal.localeCompare(aVal) : aVal.localeCompare(bVal);
          });
        };

        ctrl.sortBy = function(field) {
          if (ctrl.sortField === field) {
            ctrl.sortReverse = !ctrl.sortReverse;
          } else {
            ctrl.sortField = field;
            ctrl.sortReverse = false;
          }
          ctrl.sortCostCenters();
        };

        ctrl.goToCreateCostCenter = function() {
          $location.path('/cost-centers/create');
        };

        ctrl.editCostCenter = function(costCenterCode) {
          $location.path(`/cost-centers/edit/${costCenterCode}`);
        };

        ctrl.deleteCostCenter = function(costCenterCode) {
          if (confirm('Are you sure you want to delete this cost center?')) {
            costCenterService.deleteCostCenter(costCenterCode)
              .then(() => {
                ctrl.costCenters = ctrl.costCenters.filter(cc => cc.cost_center_code !== costCenterCode);
                ctrl.filterCostCenters();
              })
              .catch(error => {
                console.error('Error deleting cost center:', error);
                alert('Failed to delete cost center.');
              });
          }
        };
      }
    ]
  });

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\dashboard\dashboard.component.css -----
/* frontend/src/app/dashboard/dashboard.component.css */
.budget-list-container {
    max-width: 1200px;
    margin: 80px auto 20px; /* Added top margin to account for fixed navbar */
    padding: 0 20px;
}

.dashboard-cards {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 20px;
    margin-top: 20px;
}

.dashboard-card {
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    position: relative;
    overflow: hidden;
}

.card-icon {
    position: absolute;
    top: 20px;
    right: 20px;
    color: #4CAF50;
    opacity: 0.1;
    font-size: 48px;
}

.card-header {
    padding: 20px;
    border-bottom: 1px solid #eee;
}

.card-header h3 {
    margin: 0;
    font-size: 18px;
    color: #333;
    font-weight: 600;
}

.card-body {
    padding: 20px;
    flex: 1;
    min-height: 200px;
}

.card-main-text {
    font-size: 24px;
    color: #333;
    margin-bottom: 10px;
}

.card-amount {
    font-size: 20px;
    color: #4CAF50;
    font-weight: 600;
}

.card-empty {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100%;
    color: #666;
    font-style: italic;
}

.card-list {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.list-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px;
    border-radius: 4px;
    background: #f8f9fa;
    transition: background-color 0.3s ease;
}

.list-item:hover {
    background: #eee;
}

.item-left {
    display: flex;
    flex-direction: column;
}

.item-title {
    font-weight: 500;
    color: #333;
}

.item-subtitle {
    font-size: 12px;
    color: #666;
}

.item-amount {
    font-weight: 600;
    color: #4CAF50;
}

.card-footer {
    padding: 15px 20px;
    border-top: 1px solid #eee;
    background: #f8f9fa;
}

.btn-primary {
    background-color: #4CAF50;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 4px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
    transition: background-color 0.3s ease;
    width: 100%;
    justify-content: center;
}

.btn-primary:hover {
    background-color: #45a049;
}

.quick-links {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.quick-link-btn {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 12px;
    background: #f8f9fa;
    border: 1px solid #eee;
    border-radius: 4px;
    color: #333;
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 500;
}

.quick-link-btn:hover {
    background: #4CAF50;
    color: white;
    border-color: #4CAF50;
}

.quick-link-btn i {
    font-size: 16px;
    width: 20px;
}

.last-login {
    color: #666;
    font-size: 14px;
}

/* Responsive Design */
@media (max-width: 1024px) {
    .dashboard-cards {
        grid-template-columns: 1fr;
    }
    
    .card-body {
        min-height: 150px;
    }
}

@media (max-width: 768px) {
    .budget-list-container {
        margin-top: 70px; /* Slightly reduced for mobile */
    }

    .dashboard-card {
        margin-bottom: 20px;
    }
    
    .list-item {
        flex-direction: column;
        align-items: flex-start;
        gap: 5px;
    }
    
    .item-right {
        align-self: flex-end;
    }
}

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\dashboard\dashboard.component.html -----
<!-- frontend/src/app/dashboard/dashboard.component.html -->
<div class="budget-list-container">
    <div class="budget-header">
        <h2 class="budget-title">Dashboard Overview</h2>
        <span class="last-login">Last login: {{$ctrl.currentDate | date:'medium'}}</span>
    </div>

    <div class="dashboard-cards">
        <!-- Active AOP Card -->
        <div class="dashboard-card">
            <div class="card-icon">
                <i class="fas fa-file-alt"></i>
            </div>
            <div class="card-header">
                <h3>Active AOP</h3>
            </div>
            <div class="card-body">
                <div ng-if="$ctrl.activeAop">
                    <p class="card-main-text">{{$ctrl.activeAop.aop_name}}</p>
                    <p class="card-amount">${{$ctrl.activeAop.total_amount | number:2}}</p>
                </div>
                <div ng-if="!$ctrl.activeAop" class="card-empty">
                    <p>No Active AOP</p>
                </div>
            </div>
            <div class="card-footer">
                <button class="btn-primary" ng-click="$ctrl.goToAopHeaders()">
                    <i class="fas fa-arrow-right"></i> View AOPs
                </button>
            </div>
        </div>

        <!-- My Budget Requests -->
        <div class="dashboard-card">
            <div class="card-icon">
                <i class="fas fa-clock"></i>
            </div>
            <div class="card-header">
                <h3>Pending Budget Requests</h3>
            </div>
            <div class="card-body">
                <div ng-if="$ctrl.pendingRequests.length > 0" class="card-list">
                    <div class="list-item" ng-repeat="request in $ctrl.pendingRequests">
                        <div class="item-left">
                            <span class="item-title">{{request.project}}</span>
                            <span class="item-subtitle">Pending Approval</span>
                        </div>
                        <div class="item-right">
                            <span class="item-amount">${{request.amount | number:2}}</span>
                        </div>
                    </div>
                </div>
                <div ng-if="!$ctrl.pendingRequests.length" class="card-empty">
                    <p>No pending requests</p>
                </div>
            </div>
            <div class="card-footer">
                <button class="btn-primary" ng-click="$ctrl.goToBudgetList()">
                    <i class="fas fa-list"></i> View All Budgets
                </button>
            </div>
        </div>

        <!-- Recent Purchase Orders -->
		<div class="dashboard-card">
			<div class="card-icon">
				<i class="fas fa-shopping-cart"></i>
			</div>
			<div class="card-header">
				<h3>Recent Purchase Orders</h3>
			</div>
			<div class="card-body">
				<div ng-if="$ctrl.loading.pos" class="loading-spinner">
					<div class="spinner"></div>
					<p>Loading purchase orders...</p>
				</div>
				<div ng-if="!$ctrl.loading.pos && $ctrl.recentPOs.length > 0" class="card-list">
					<div class="list-item" ng-repeat="po in $ctrl.recentPOs">
						<div class="item-left">
							<span class="item-title">{{po.po_number}} - {{po.purchase_item}}</span>
							<span class="item-subtitle">Line {{po.po_line_number}} • {{po.po_date | date:'MMM d, y'}}</span>
						</div>
						<div class="item-right">
							<span class="item-amount">${{po.amount | number:2}}</span>
						</div>
					</div>
				</div>
				<div ng-if="!$ctrl.loading.pos && !$ctrl.recentPOs.length" class="card-empty">
					<p>No recent purchase orders</p>
				</div>
			</div>
			<div class="card-footer">
				<button class="btn-primary" ng-click="$ctrl.goToPurchaseOrders()">
					<i class="fas fa-arrow-right"></i> View All POs
				</button>
			</div>
		</div>

        <!-- Quick Links -->
        <div class="dashboard-card">
            <div class="card-icon">
                <i class="fas fa-link"></i>
            </div>
            <div class="card-header">
                <h3>Quick Actions</h3>
            </div>
            <div class="card-body quick-links">
                <button class="quick-link-btn" ng-click="$ctrl.goToCreateBudget()">
                    <i class="fas fa-plus-circle"></i>
                    <span>Create New Budget</span>
                </button>
				<button class="quick-link-btn" ng-click="$ctrl.goToCostCenters()">
					<i class="fas fa-building"></i>
					<span>Manage Cost Centers</span>
				</button>				
                <button class="quick-link-btn" ng-click="$ctrl.goToReports('organization')">
                    <i class="fas fa-sitemap"></i>
                    <span>View My Organization</span>
                </button>
                <button class="quick-link-btn" ng-click="$ctrl.goToReports('budget')">
                    <i class="fas fa-chart-pie"></i>
                    <span>Budget Summary Report</span>
                </button>
				<button class="quick-link-btn" ng-click="$ctrl.goToOrgHierarchy()">
					<i class="fas fa-sitemap"></i>
					<span>View Organization Hierarchy</span>
				</button>
				<button class="quick-link-btn" ng-click="$ctrl.goToCreateOrgHierarchy()">
					<i class="fas fa-plus-circle"></i>
					<span>Create Organization Relationship</span>
				</button>				
            </div>
        </div>
    </div>
</div>

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\dashboard\dashboard.component.js -----
// frontend/src/app/dashboard/dashboard.component.js
"use strict";
angular.module('budgetApp')
  .component('dashboard', {
    templateUrl: 'app/dashboard/dashboard.component.html',
    controller: ['$location', '$rootScope', 'aopService', 'budgetService', 'purchaseOrderService', '$scope',
      function($location, $rootScope, aopService, budgetService, purchaseOrderService, $scope) {
        const ctrl = this;

        ctrl.username = $rootScope.username || 'User';
        ctrl.currentDate = new Date();
        ctrl.activeAop = null;
        ctrl.pendingRequests = [];
        ctrl.recentPOs = [];
        ctrl.loading = {
          aop: false,
          pos: false,
          requests: false
        };

        ctrl.$onInit = function() {
          if (!$rootScope.isLoggedIn) {
            $location.path('/login');
            return;
          }

          loadDashboardData();
        };

        function loadDashboardData() {
          // Load Active AOP
          ctrl.loading.aop = true;
          aopService.getAllAopHeaders()
            .then(headers => {
              ctrl.activeAop = headers.find(h => h.status === 'active');
            })
            .catch(error => {
              console.error('Error loading active AOP:', error);
            })
            .finally(() => {
              ctrl.loading.aop = false;
              if (!$scope.$$phase) {  // Put back for navigation
                $scope.$apply();
              }
            });

          // Load recent purchase orders
          ctrl.loading.pos = true;
          purchaseOrderService.getAllPurchaseOrders()
            .then(pos => {
              // Sort by date (descending) and take most recent 5
              ctrl.recentPOs = pos
                .sort((a, b) => new Date(b.po_date) - new Date(a.po_date))
                .slice(0, 5);
            })
            .catch(error => {
              console.error('Error loading purchase orders:', error);
            })
            .finally(() => {
              ctrl.loading.pos = false;
              if (!$scope.$$phase) { // Put back for navigation
                $scope.$apply();
              }
            });

        // Load Budget request
        ctrl.loading.requests = true;

        budgetService.getAllBudgets()  // Fetch all budgets
            .then(budgets => {
                ctrl.pendingRequests = budgets.slice(0,5);  // put them in pendingRequests
                ctrl.loading.requests = false;
                 if (!$scope.$$phase) { // Put back for navigation
                    $scope.$apply();
                 }
            })
            .catch(error => {
                console.error('Error loading budgets for dashboard:', error);
                ctrl.loading.requests = false;
                if (!$scope.$$phase) { // Put back for navigation
                    $scope.$apply();
                }
            });
        }

        // Navigation functions
        ctrl.goToBudgetList = function() {
          $location.path('/budget-list');
          if (!$scope.$$phase) { // Put back for navigation
                $scope.$apply();
          }
        };

        ctrl.goToCreateBudget = function() {
          $location.path('/budget-create');
            if (!$scope.$$phase) { // Put back for navigation
                $scope.$apply();
            }
        };

        ctrl.goToCostCenters = function() {
          $location.path('/cost-centers');
            if (!$scope.$$phase) { // Put back for navigation
                $scope.$apply();
            }
        };

        ctrl.goToAopHeaders = function() {
          $location.path('/aop-headers');
           if (!$scope.$$phase) { // Put back for navigation
                $scope.$apply();
            }
        };

        ctrl.goToPurchaseOrders = function() {
          $location.path('/purchase-orders');
            if (!$scope.$$phase) { // Put back for navigation
                $scope.$apply();
            }
        };

		ctrl.goToOrgHierarchy = function() {
			$location.path('/org-hierarchy');
            if (!$scope.$$phase) { // Put back for navigation
                $scope.$apply();
            }
		};

		ctrl.goToCreateOrgHierarchy = function() {
			$location.path('/org-hierarchy/create');
            if (!$scope.$$phase) { // Put back for navigation
                $scope.$apply();
            }
		};
		
        ctrl.goToReports = function(type) {
          $location.path('/reports/' + type);
            if (!$scope.$$phase) { // Put back for navigation
                $scope.$apply();
            }
        };
      }
    ]
  });

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\login\login.component.html -----
<!-- frontend/src/app/login/login.component.html -->
<div class="login-container" ng-cloak>
  <div class="login-header">
    <img src="assets/logo-placeholder.png" alt="Budget Management App Logo" class="logo">
    <h1>Budget Management App</h1>
    <h2>FP&A Hackathon</h2>
  </div>
  
  <form ng-submit="$ctrl.login()" class="login-form" name="loginForm" novalidate>
    <div class="form-group">
      <label for="password">Password:</label>
      <input 
        type="password" 
        id="password" 
        name="password"
        ng-model="$ctrl.formData.password"
        ng-disabled="$ctrl.isLoading"
        required
        class="form-control">
    </div>
    <button 
      type="submit" 
      ng-disabled="!$ctrl.isFormValid() || $ctrl.isLoading"
      class="login-button">
      <span ng-if="!$ctrl.isLoading">Login</span>
      <span ng-if="$ctrl.isLoading">Logging in...</span>
    </button>
    <div ng-if="$ctrl.loginError" class="error-message" role="alert">
      {{ $ctrl.loginError }}
    </div>
  </form>
</div>

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\login\login.component.js -----
// frontend/src/app/login/login.component.js
"use strict";
angular.module('budgetApp')
    .component('login', {
        templateUrl: 'app/login/login.component.html',
        controller: ['$location', '$rootScope', '$timeout', function ($location, $rootScope, $timeout) {
            const ctrl = this;
            let loginTimeout;

            ctrl.formData = {
                password: ''
            };
            ctrl.loginError = '';
            ctrl.isLoading = false;


            ctrl.login = function () {
                ctrl.loginError = '';
                ctrl.isLoading = true;

                loginTimeout = $timeout(function () {
                    if (ctrl.formData.password === 'IKnowYou241202') {
                        $rootScope.isLoggedIn = true;
                        sessionStorage.setItem('isLoggedIn', 'true');
                        $location.path('/dashboard');
                    } else {
                        ctrl.loginError = 'Incorrect password. Please try again.';
                        $rootScope.isLoggedIn = false;
                        sessionStorage.removeItem('isLoggedIn');
                        ctrl.formData.password = '';
                    }
                    ctrl.isLoading = false;
                }, 500);
            };

            ctrl.$onInit = function () {
                if (sessionStorage.getItem('isLoggedIn') === 'true') {
                    $rootScope.isLoggedIn = true;
                    $location.path('/dashboard');
                }
            };

            ctrl.$onDestroy = function () {
                $timeout.cancel(loginTimeout); // Properly cancel the timeout
            };

            ctrl.isFormValid = function () {
                return ctrl.formData.password && ctrl.formData.password.length > 0;
            };
        }]
    });

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\navigation\navigation.component.css -----
/* frontend/src/app/navigation/navigation.component.css */
.main-nav {
    background-color: white;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 1000;
}

.nav-content {
    max-width: 1200px;
    margin: 0 auto;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0 20px;
    height: 60px;
}

.nav-brand {
    font-size: 1.25rem;
    font-weight: 600;
    color: #333;
}

.nav-links {
    display: flex;
    list-style: none;
    margin: 0;
    padding: 0;
    align-items: center;
}

.nav-links li {
    position: relative;
    margin: 0 5px;
}

.nav-links a {
    color: #666;
    text-decoration: none;
    padding: 8px 12px;
    display: flex;
    align-items: center;
    gap: 5px;
    transition: color 0.3s ease;
}

.nav-links a:hover {
    color: #333;
}

.nav-links li.active a {
    color: #4CAF50;
}

.dropdown-menu {
    display: none;
    position: absolute;
    top: 100%;
    left: 0;
    background-color: white;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    border-radius: 4px;
    min-width: 160px;
    z-index: 1000;
}

.dropdown:hover .dropdown-menu {
    display: block;
}

.dropdown-menu li {
    margin: 0;
}

.dropdown-menu a {
    padding: 8px 16px;
    display: block;
}

.dropdown-menu a:hover {
    background-color: #f5f5f5;
}

.user-section {
    display: flex;
    align-items: center;
    gap: 15px;
}

.username {
    color: #666;
}

.logout-btn {
    background-color: #dc3545;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 4px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 5px;
    transition: background-color 0.3s ease;
}

.logout-btn:hover {
    background-color: #c82333;
}

/* Responsive Design */
@media (max-width: 1024px) {
    .nav-brand span {
        display: none;
    }
}

@media (max-width: 768px) {
    .nav-content {
        flex-direction: column;
        height: auto;
        padding: 10px;
    }

    .nav-links {
        flex-direction: column;
        width: 100%;
    }

    .nav-links li {
        width: 100%;
        margin: 0;
    }

    .nav-links a {
        padding: 12px;
    }

    .dropdown-menu {
        position: static;
        box-shadow: none;
        background-color: #f5f5f5;
    }

    .user-section {
        width: 100%;
        justify-content: space-between;
        padding: 10px 0;
    }
}

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\navigation\navigation.component.html -----
<!-- frontend/src/app/navigation/navigation.component.html -->
<nav class="main-nav">
    <div class="nav-content">
        <div class="nav-brand">
            <span>BM - Budget Management</span>
        </div>

        <ul class="nav-links">
            <li ng-class="{ active: $ctrl.isActive('/dashboard') }">
                <a href="#/dashboard">  <!-- Corrected href -->
                    <i class="fas fa-home"></i> Home
                </a>
            </li>

            <li ng-class="{ active: $ctrl.isActive('/users') }">
                <a href="#/users">  <!-- Corrected href -->
                    <i class="fas fa-users"></i> Users
                </a>
            </li>

            <li ng-class="{ active: $ctrl.isActive('/org-hierarchy') }">
                <a href="#/org-hierarchy">  <!-- Corrected href -->
                    <i class="fas fa-sitemap"></i> Org Hierarchy
                </a>
            </li>

            <li class="dropdown" ng-class="{ active: $ctrl.isActive('/aop-headers') }">
                <a href="javascript:void(0)">
                    <i class="fas fa-file-alt"></i> AOP <i class="fas fa-caret-down"></i>
                </a>
                <ul class="dropdown-menu">
                    <li><a href="#/aop-headers">AOP Header</a></li>  <!-- Corrected href -->
                    <li><a href="#/aop-details">AOP Detail</a></li>  <!-- Corrected href -->
                </ul>
            </li>

            <li ng-class="{ active: $ctrl.isActive('/budget-list') }">
                <a href="#/budget-list">  <!-- Corrected href -->
                    <i class="fas fa-money-bill-alt"></i> Budgets
                </a>
            </li>

            <li ng-class="{ active: $ctrl.isActive('/purchase-orders') }">
                <a href="#/purchase-orders">  <!-- Corrected href -->
                    <i class="fas fa-shopping-cart"></i> Purchase Orders
                </a>
            </li>
			<li ng-class="{ active: $ctrl.isActive('/cost-centers') }">
                <a href="#/cost-centers">  <!-- Corrected href -->
                    <i class="fas fa-building"></i> Cost Centers
                </a>
            </li>
            <li class="dropdown" ng-class="{ active: $ctrl.isActive('/reports') }">
                <a href="javascript:void(0)">
                    <i class="fas fa-chart-bar"></i> Reports <i class="fas fa-caret-down"></i>
                </a>
                <ul class="dropdown-menu">
                    <li><a href="#/reports/organization">My Organization</a></li>  <!-- Corrected href -->
                    <li><a href="#/reports/budget">My Budget</a></li>  <!-- Corrected href -->
                </ul>
            </li>
        </ul>

        <div class="user-section">
            <span class="username">{{$ctrl.username}}</span>
            <button ng-click="$ctrl.logout()" class="logout-btn">
                <i class="fas fa-sign-out-alt"></i> Logout
            </button>
        </div>
    </div>
</nav>

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\navigation\navigation.component.js -----
// frontend/src/app/navigation/navigation.component.js
angular.module('budgetApp')
  .component('navigationBar', {
    templateUrl: 'app/navigation/navigation.component.html',
    controller: ['$location', '$rootScope', function($location, $rootScope) {
      const ctrl = this;

      ctrl.username = $rootScope.username || 'User';

      ctrl.isActive = function(path) {
        return $location.path().startsWith(path); // Much simpler check
      };

      ctrl.logout = function() {
        $rootScope.isLoggedIn = false;
        sessionStorage.removeItem('isLoggedIn');
        $location.path('/login');
      };
    }]
  });

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\org-hierarchy\org-hierarchy.component.html -----
<!-- frontend/src/app/org-hierarchy/org-hierarchy.component.html -->

<div class="budget-list-container">
    <div class="budget-header">
        <h2 class="budget-title">Organizational Hierarchy</h2>
        <button ng-click="$ctrl.goToCreateRelationship()" class="create-button">
            <i class="fas fa-plus"></i> Add Relationship
        </button>
    </div>
     <div class="filter-section">
        <!-- Manager Filter -->
        <div>
            <select ng-model="$ctrl.selectedManager" ng-change="$ctrl.loadHierarchy()" class="filter-input">
                <option value="">Select a Manager</option>
                <option ng-repeat="user in $ctrl.users" value="{{user.ldap}}">{{user.first_name}} {{user.last_name}} ({{user.ldap}})</option>

            </select>
        </div>
    </div>
    <div ng-if="$ctrl.loading" class="loading-spinner">
        <div class="spinner"></div>
        <p>Loading hierarchy...</p>
    </div>
    <div ng-if="$ctrl.loadingUsers" class="loading-spinner">
        <div class="spinner"></div>
        <p>Loading users...</p>
    </div>

    <div ng-if="$ctrl.error" class="error-message">
        {{ $ctrl.error }}
    </div>

    <div ng-if="!$ctrl.loading && !$ctrl.error && $ctrl.hierarchy.length > 0" class="hierarchy-list">
     <ul class="hierarchy-level">
            <li ng-repeat="manager in $ctrl.hierarchy" class="manager-item">
                <div class="manager-info">
                    <i class="fas fa-user"></i>
                    {{manager.first_name}} {{manager.last_name}} ({{manager.ldap}})
                </div>
                <ul class="hierarchy-level" ng-if="manager.subordinates && manager.subordinates.length > 0">
                    <li ng-repeat="employee in manager.subordinates" class="employee-item">
                        <div class="employee-info">
                            <i class="fas fa-user-tie"></i>
                            {{employee.first_name}} {{employee.last_name}} ({{employee.ldap}})
                        </div>
                       <!-- Recursive display -->
                        <ul class="hierarchy-level" ng-if="employee.subordinates && employee.subordinates.length > 0">
                            <li ng-repeat="subordinate in employee.subordinates" class="subordinate-item">
                                 <div class="subordinate-info">
                                    <i class="fas fa-user-tie"></i>
                                    {{subordinate.first_name}} {{subordinate.last_name}} ({{subordinate.ldap}})
                                </div>
                                 <ul class="hierarchy-level" ng-if="subordinate.subordinates && subordinate.subordinates.length > 0">
                                    <li ng-repeat="subsubordinate in subordinate.subordinates" class="subsubordinate-item">
                                        <div class="subordinate-info">
                                            <i class="fas fa-user-tie"></i>
                                            {{subsubordinate.first_name}} {{subsubordinate.last_name}} ({{subsubordinate.ldap}})
                                        </div>
                                    </li>
                                </ul>
                            </li>
                        </ul>
                    </li>
                </ul>
            </li>
        </ul>
    </div>

    <div ng-if="!$ctrl.loading && !$ctrl.error && $ctrl.hierarchy.length === 0" class="empty-state">
        <i class="fas fa-sitemap"></i>
        <p>No hierarchy data found.</p>
    </div>
     <!-- Display Relationships (Initial Simple View) -->
    <table ng-if="!$ctrl.loading && !$ctrl.error && $ctrl.relationships.length > 0 && !$ctrl.selectedManager" class="budget-table">
        <thead>
            <tr>
                <th>Manager LDAP</th>
                <th>Employee LDAP</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <tr ng-repeat="relationship in $ctrl.relationships">
                <td>{{ relationship.manager_ldap }}</td>
                <td>{{ relationship.employee_ldap }}</td>
                <td>
                    <div class="action-buttons">
                        <button ng-click="$ctrl.editRelationship(relationship.relationship_id)" class="edit-button">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button ng-click="$ctrl.deleteRelationship(relationship.relationship_id)" class="delete-button">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>

    <div ng-if="!$ctrl.loading && !$ctrl.error && $ctrl.relationships.length === 0 && !$ctrl.selectedManager" class="empty-state">
        <i class="fas fa-sitemap"></i>
        <p>No relationships found.</p>
    </div>
</div>

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\org-hierarchy\org-hierarchy.component.js -----
// frontend/src/app/org-hierarchy/org-hierarchy.component.js
"use strict";

angular.module('budgetApp')
  .component('orgHierarchy', {
    templateUrl: 'app/org-hierarchy/org-hierarchy.component.html',
    controller: ['orgHierarchyService', 'userService', '$location', '$scope', '$q',
      function(orgHierarchyService, userService, $location, $scope, $q) {
        const ctrl = this;
        ctrl.relationships = [];
        ctrl.hierarchy = [];
        ctrl.selectedManager = '';
        ctrl.loading = false;
        ctrl.error = null;
        ctrl.users = [];
        ctrl.loadingUsers = true;


        ctrl.$onInit = function() {
            ctrl.loadUsers();
            ctrl.loadRelationships(); //Load relationships initially
        };

        ctrl.loadHierarchy = function() {
            ctrl.loading = true;
            ctrl.error = null;
            ctrl.hierarchy = []; // Clear previous hierarchy

            if (ctrl.selectedManager) {
                orgHierarchyService.getHierarchyForManager(ctrl.selectedManager)
                .then(hierarchy => {
                    ctrl.hierarchy = hierarchy;
                })
                .catch(error => {
                    ctrl.error = "Failed to load hierarchy.";
                    console.error('Error loading hierarchy:', error);
                })
                .finally(() => {
                    ctrl.loading = false;
                    // $scope.$apply(); //Safe apply  <-- REMOVE THIS
                });
            } else {
                ctrl.loading = false; //No manager selected, so not loading.
            }
        };

        ctrl.loadUsers = function() {
          ctrl.loadingUsers = true;
          userService.getAllUsers()
            .then(users => {
              ctrl.users = users;
            })
            .catch(error => {
              ctrl.error = 'Failed to load users.';
              console.error('Error loading users:', error);
            })
             .finally(() => {
              ctrl.loadingUsers = false;
              // if (!$scope.$$phase) {   <-- REMOVE THIS
              //   $scope.$apply();
              // }
            });
        };


        ctrl.goToCreateRelationship = function() {
          $location.path('/org-hierarchy/create');
        };

        ctrl.editRelationship = function(relationshipId) {
          $location.path(`/org-hierarchy/edit/${relationshipId}`);
        };

        ctrl.deleteRelationship = function(relationshipId) {
          if (confirm('Are you sure you want to delete this relationship?')) {
            orgHierarchyService.deleteRelationship(relationshipId)
              .then(() => {
                ctrl.relationships = ctrl.relationships.filter(rel => rel.relationship_id !== relationshipId);
                //  if (!$scope.$$phase) {     <-- REMOVE THIS
                //     $scope.$apply(); // or $scope.$digest();
                //   }
              })
              .catch(error => {
                console.error('Error deleting relationship:', error);
                alert('Failed to delete relationship.');
              });
          }
        };
        ctrl.loadRelationships = function () {
            ctrl.loading = true;
            ctrl.error = null;

            orgHierarchyService.getAllRelationships()
            .then(relationships => {
                ctrl.relationships = relationships;
                })
            .catch(error => {
                ctrl.error = "Failed to load relationships.";
                console.error('Error loading relationships', error);
                })
            .finally(() => {
                ctrl.loading = false;
                // if (!$scope.$$phase) {  <-- REMOVE THIS
                //     $scope.$apply();
                // }
            });
        };
      }
    ]
  });

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\org-hierarchy\org-hierarchy-create\org-hierarchy-create.component.html -----
<!-- frontend/src/app/org-hierarchy/org-hierarchy-create/org-hierarchy-create.component.html -->
<div class="budget-form-container">
    <div class="budget-form-header">
        <h2 class="budget-title">{{ $ctrl.isEditMode ? 'Edit Relationship' : 'Create Relationship' }}</h2>
        <button type="button" ng-click="$ctrl.goBack()" class="back-button">
            <i class="fas fa-arrow-left"></i> Back to List
        </button>
    </div>

    <form ng-submit="$ctrl.saveRelationship()" class="budget-form" name="relationshipForm">
        <div class="form-grid">
            <div class="form-group">
                <label for="manager_ldap">Manager LDAP <span class="required">*</span></label>
                <select id="manager_ldap" name="manager_ldap" ng-model="$ctrl.relationship.manager_ldap" required class="form-input" ng-disabled="$ctrl.loadingUsers">
                    <option value="">Select Manager</option>
                     <option ng-repeat="user in $ctrl.users" value="{{user.ldap}}">{{user.first_name}} {{user.last_name}} ({{user.ldap}})</option>
                </select>
            </div>
             <div class="form-group">
                <label for="employee_ldap">Employee LDAP <span class="required">*</span></label>
                <select id="employee_ldap" name="employee_ldap" ng-model="$ctrl.relationship.employee_ldap" required class="form-input" ng-disabled="$ctrl.loadingUsers">
                    <option value="">Select Employee</option>
                   <option ng-repeat="user in $ctrl.users" value="{{user.ldap}}">{{user.first_name}} {{user.last_name}} ({{user.ldap}})</option>
                </select>
            </div>
        </div>

        <div ng-if="$ctrl.error" class="error-message">
            {{ $ctrl.error }}
        </div>

        <div class="form-actions">
            <button type="button" ng-click="$ctrl.goBack()" class="cancel-button">Cancel</button>
            <button type="submit" class="save-button" ng-disabled="relationshipForm.$invalid || $ctrl.saving">
                <i class="fas" ng-class="{'fa-spinner fa-spin': $ctrl.saving, 'fa-save': !$ctrl.saving}"></i>
                {{ $ctrl.saving ? 'Saving...' : 'Save' }}
            </button>
        </div>
    </form>
</div>

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\org-hierarchy\org-hierarchy-create\org-hierarchy-create.component.js -----
// frontend/src/app/org-hierarchy/org-hierarchy-create/org-hierarchy-create.component.js
"use strict";

angular.module('budgetApp')
  .component('orgHierarchyCreate', {
    templateUrl: 'app/org-hierarchy/org-hierarchy-create/org-hierarchy-create.component.html',
    controller: ['orgHierarchyService', 'userService', '$routeParams', '$location', '$scope',
      function(orgHierarchyService, userService, $routeParams, $location, $scope) {
        const ctrl = this;

        ctrl.relationship = {
          manager_ldap: '',
          employee_ldap: ''
        };

        ctrl.relationshipId = $routeParams.relationshipId;
        ctrl.isEditMode = !!ctrl.relationshipId;
        ctrl.error = null;
        ctrl.saving = false;
        ctrl.users = [];
        ctrl.loadingUsers = true;

        ctrl.$onInit = function() {
           ctrl.loadUsers();
          if (ctrl.isEditMode) {
            ctrl.loadRelationship();
          }
        };

        ctrl.loadUsers = function() {
          ctrl.loadingUsers = true;
          userService.getAllUsers()
            .then(users => {
              ctrl.users = users;
            })
            .catch(error => {
              ctrl.error = 'Failed to load users.';
              console.error('Error loading users:', error);
            })
             .finally(() => {
              ctrl.loadingUsers = false;
              // if (!$scope.$$phase) {  <-- REMOVE
              //   $scope.$apply();
              // }
            });
        };

        ctrl.loadRelationship = function() {
          orgHierarchyService.getRelationshipById(ctrl.relationshipId)
            .then(relationship => {
              ctrl.relationship = relationship;
            })
            .catch(error => {
              ctrl.error = 'Failed to load relationship details.';
              console.error('Error loading relationship:', error);
            });
        };

        ctrl.saveRelationship = function() {
          ctrl.error = null;
          ctrl.saving = true;

          if (ctrl.relationship.manager_ldap === ctrl.relationship.employee_ldap) {
            ctrl.error = 'Manager and employee cannot be the same.';
            ctrl.saving = false;
            return;
          }

          const savePromise = ctrl.isEditMode ?
            orgHierarchyService.updateRelationship(ctrl.relationshipId, ctrl.relationship) :
            orgHierarchyService.createRelationship(ctrl.relationship);

          savePromise
            .then(() => {
              $location.path('/org-hierarchy');
            })
            .catch(error => {
              ctrl.error = 'Failed to save relationship.';
              console.error('Error saving relationship:', error);
            })
            .finally(() => {
              ctrl.saving = false;
              // if (!$scope.$$phase) {  <-- REMOVE
              //   $scope.$apply();
              // }
            });
        };

        ctrl.goBack = function() {
          $location.path('/org-hierarchy');
        };
      }
    ]
  });

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\purchase-order\purchase-order-list\purchase-order-list.component.html -----
<!-- frontend/src/app/purchase-order/purchase-order-list/purchase-order-list.component.html -->
<div class="budget-list-container">
    <div class="budget-header">
        <h2 class="budget-title">Purchase Orders</h2>
    </div>

    <!-- Search and Filter Section -->
    <div class="filter-section">
        <div>
            <input type="text" 
                   ng-model="$ctrl.searchQuery" 
                   ng-change="$ctrl.filterPOs()"
                   placeholder="Search PO number, item, or requestor..."
                   class="filter-input">
        </div>
        
        <div>
            <input type="date" 
                   ng-model="$ctrl.dateRange.start" 
                   ng-change="$ctrl.filterPOs()"
                   placeholder="Start Date"
                   class="filter-input">
        </div>
        
        <div>
            <input type="date" 
                   ng-model="$ctrl.dateRange.end" 
                   ng-change="$ctrl.filterPOs()"
                   placeholder="End Date"
                   class="filter-input">
        </div>
    </div>

    <!-- Loading State -->
    <div ng-if="$ctrl.loading" class="loading-spinner">
        <div class="spinner"></div>
        <p>Loading purchase orders...</p>
    </div>

    <!-- Error State -->
    <div ng-if="$ctrl.error" class="error-message">
        <p>{{$ctrl.error}}</p>
    </div>

    <!-- Empty State -->
    <div ng-if="!$ctrl.loading && !$ctrl.error && $ctrl.filteredPOs.length === 0" class="empty-state">
        <i class="fas fa-file-invoice-dollar"></i>
        <p>No purchase orders found</p>
    </div>

    <!-- Purchase Orders Table -->
    <table ng-if="!$ctrl.loading && $ctrl.filteredPOs.length > 0" class="budget-table">
        <thead>
            <tr>
                <th ng-click="$ctrl.sortBy('po_number')">
                    PO Number
                    <i class="fas" ng-class="{'fa-sort-up': !$ctrl.sortReverse, 'fa-sort-down': $ctrl.sortReverse}" 
                       ng-if="$ctrl.sortField === 'po_number'"></i>
                </th>
                <th ng-click="$ctrl.sortBy('po_line_number')">
                    Line Number
                    <i class="fas" ng-class="{'fa-sort-up': !$ctrl.sortReverse, 'fa-sort-down': $ctrl.sortReverse}" 
                       ng-if="$ctrl.sortField === 'po_line_number'"></i>
                </th>
                <th ng-click="$ctrl.sortBy('purchase_item')">
                    Item
                    <i class="fas" ng-class="{'fa-sort-up': !$ctrl.sortReverse, 'fa-sort-down': $ctrl.sortReverse}" 
                       ng-if="$ctrl.sortField === 'purchase_item'"></i>
                </th>
                <th ng-click="$ctrl.sortBy('amount')">
                    Amount
                    <i class="fas" ng-class="{'fa-sort-up': !$ctrl.sortReverse, 'fa-sort-down': $ctrl.sortReverse}" 
                       ng-if="$ctrl.sortField === 'amount'"></i>
                </th>
                <th ng-click="$ctrl.sortBy('requestor_ldap')">
                    Requestor
                    <i class="fas" ng-class="{'fa-sort-up': !$ctrl.sortReverse, 'fa-sort-down': $ctrl.sortReverse}" 
                       ng-if="$ctrl.sortField === 'requestor_ldap'"></i>
                </th>
                <th ng-click="$ctrl.sortBy('po_date')">
                    PO Date
                    <i class="fas" ng-class="{'fa-sort-up': !$ctrl.sortReverse, 'fa-sort-down': $ctrl.sortReverse}" 
                       ng-if="$ctrl.sortField === 'po_date'"></i>
                </th>
            </tr>
        </thead>
        <tbody>
            <tr ng-repeat="po in $ctrl.getPaginatedPOs()">
                <td>{{po.po_number}}</td>
                <td>{{po.po_line_number}}</td>
                <td>{{po.purchase_item}}</td>
                <td>${{po.amount | number:2}}</td>
                <td>{{po.requestor_ldap}}</td>
                <td>{{po.po_date | date:'MMM d, y'}}</td>
            </tr>
        </tbody>
    </table>

    <!-- Pagination -->
    <div ng-if="$ctrl.filteredPOs.length > 0" class="pagination">
        <div class="pagination-info">
            Showing {{($ctrl.currentPage - 1) * $ctrl.pageSize + 1}} to 
            {{Math.min($ctrl.currentPage * $ctrl.pageSize, $ctrl.filteredPOs.length)}} of 
            {{$ctrl.filteredPOs.length}} entries
        </div>
        <div class="pagination-buttons">
            <button ng-click="$ctrl.currentPage = $ctrl.currentPage - 1" 
                    ng-disabled="$ctrl.currentPage === 1"
                    class="pagination-button">
                Previous
            </button>
            <button ng-click="$ctrl.currentPage = $ctrl.currentPage + 1" 
                    ng-disabled="$ctrl.currentPage * $ctrl.pageSize >= $ctrl.filteredPOs.length"
                    class="pagination-button">
                Next
            </button>
        </div>
    </div>
</div>

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\purchase-order\purchase-order-list\purchase-order-list.component.js -----
// frontend/src/app/purchase-order/purchase-order-list/purchase-order-list.component.js
"use strict";

angular.module('budgetApp')
  .component('purchaseOrderList', {
    templateUrl: 'app/purchase-order/purchase-order-list/purchase-order-list.component.html',
    controller: ['purchaseOrderService', '$scope', function(purchaseOrderService, $scope) {
      const ctrl = this;
      
      ctrl.purchaseOrders = [];
      ctrl.filteredPOs = [];
      ctrl.loading = true;
      ctrl.error = null;
      ctrl.searchQuery = '';
      ctrl.dateRange = {
        start: null,
        end: null
      };
      ctrl.sortField = 'po_number';
      ctrl.sortReverse = false;
      ctrl.currentPage = 1;
      ctrl.pageSize = 10;

      ctrl.$onInit = function() {
        loadPurchaseOrders();
      };

      function loadPurchaseOrders() {
        ctrl.loading = true;
        ctrl.error = null;

        purchaseOrderService.getAllPurchaseOrders()
          .then(pos => {
            ctrl.purchaseOrders = pos;
            ctrl.filterPOs();
          })
          .catch(error => {
            ctrl.error = "Failed to load purchase orders. Please try again later.";
            console.error('Error loading purchase orders:', error);
          })
          .finally(() => {
            ctrl.loading = false;
            if (!$scope.$$phase) {
              $scope.$apply();
            }
          });
      }

      ctrl.filterPOs = function() {
        ctrl.filteredPOs = ctrl.purchaseOrders.filter(po => {
          const searchLower = ctrl.searchQuery.toLowerCase();
          const matchesSearch = !ctrl.searchQuery || 
            po.po_number.toLowerCase().includes(searchLower) ||
            po.purchase_item.toLowerCase().includes(searchLower) ||
            po.requestor_ldap.toLowerCase().includes(searchLower);

          const poDate = new Date(po.po_date);
          const matchesDateRange = (!ctrl.dateRange.start || poDate >= new Date(ctrl.dateRange.start)) &&
            (!ctrl.dateRange.end || poDate <= new Date(ctrl.dateRange.end));

          return matchesSearch && matchesDateRange;
        });

        ctrl.sortPOs();
      };

      ctrl.sortPOs = function() {
        ctrl.filteredPOs.sort((a, b) => {
          let aVal = a[ctrl.sortField];
          let bVal = b[ctrl.sortField];

          if (ctrl.sortField === 'po_date') {
            aVal = new Date(aVal);
            bVal = new Date(bVal);
          } else if (typeof aVal === 'string') {
            aVal = aVal.toLowerCase();
            bVal = bVal.toLowerCase();
          }

          if (aVal < bVal) return ctrl.sortReverse ? 1 : -1;
          if (aVal > bVal) return ctrl.sortReverse ? -1 : 1;
          return 0;
        });
      };

      ctrl.sortBy = function(field) {
        if (ctrl.sortField === field) {
          ctrl.sortReverse = !ctrl.sortReverse;
        } else {
          ctrl.sortField = field;
          ctrl.sortReverse = false;
        }
        ctrl.sortPOs();
      };

      ctrl.getPaginatedPOs = function() {
        const startIndex = (ctrl.currentPage - 1) * ctrl.pageSize;
        return ctrl.filteredPOs.slice(startIndex, startIndex + ctrl.pageSize);
      };
    }]
  });

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\report\report.component.js -----


----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\user\user.service.js -----


----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\user\user-create\user-create.component.html -----
<!-- frontend/src/app/user/user-create/user-create.component.html -->
<div class="budget-form-container">
    <div class="budget-form-header">
        <h2 class="budget-title">{{ $ctrl.isEditMode ? 'Edit User' : 'Create User' }}</h2>
        <button type="button" ng-click="$ctrl.goBack()" class="back-button">
            <i class="fas fa-arrow-left"></i> Back to List
        </button>
    </div>

    <form ng-submit="$ctrl.saveUser()" class="budget-form" name="userForm">
        <div class="form-grid">
            <div class="form-group">
                <label for="ldap">LDAP <span class="required">*</span></label>
                <input type="text" 
                       id="ldap" 
                       name="ldap"
                       ng-model="$ctrl.user.ldap"
                       required
                       ng-disabled="$ctrl.isEditMode"
                       maxlength="255"
                       class="form-input">
            </div>

            <div class="form-group">
                <label for="first_name">First Name <span class="required">*</span></label>
                <input type="text" 
                       id="first_name" 
                       name="first_name"
                       ng-model="$ctrl.user.first_name"
                       required
                       maxlength="255"
                       class="form-input">
            </div>

            <div class="form-group">
                <label for="last_name">Last Name <span class="required">*</span></label>
                <input type="text" 
                       id="last_name" 
                       name="last_name"
                       ng-model="$ctrl.user.last_name"
                       required
                       maxlength="255"
                       class="form-input">
            </div>

            <div class="form-group">
                <label for="email">Email <span class="required">*</span></label>
                <input type="email" 
                       id="email" 
                       name="email"
                       ng-model="$ctrl.user.email"
                       required
                       maxlength="255"
                       class="form-input">
            </div>

            <div class="form-group">
                <label for="level">Level</label>
                <select id="level" 
                        name="level"
                        ng-model="$ctrl.user.level"
                        class="form-input">
                    <option value="">Select Level</option>
                    <option value="L1">L1</option>
                    <option value="L2">L2</option>
                    <option value="L3">L3</option>
                    <option value="L4">L4</option>
                    <option value="L5">L5</option>
                    <option value="L6">L6</option>
                </select>
            </div>

            <div class="form-group">
                <label for="cost_center_code">Cost Center</label>
                <select id="cost_center_code"
                        name="cost_center_code"
                        ng-model="$ctrl.user.cost_center_code"
                        class="form-input">
                    <option value="">Select Cost Center</option>
                    <option ng-repeat="cc in $ctrl.costCenters"
                            value="{{cc.cost_center_code}}">
                        {{cc.cost_center_name}} ({{cc.cost_center_code}})
                    </option>
                </select>
            </div>
        </div>

        <div ng-if="$ctrl.error" class="error-message">
            {{ $ctrl.error }}
        </div>

        <div class="form-actions">
            <button type="button" ng-click="$ctrl.goBack()" class="cancel-button">Cancel</button>
            <button type="submit" 
                    class="save-button"
                    ng-disabled="userForm.$invalid || $ctrl.saving">
                <i class="fas" ng-class="{'fa-spinner fa-spin': $ctrl.saving, 'fa-save': !$ctrl.saving}"></i>
                {{ $ctrl.saving ? 'Saving...' : 'Save User' }}
            </button>
        </div>
    </form>
</div>

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\user\user-create\user-create.component.js -----
// frontend/src/app/user/user-create/user-create.component.js
angular.module('budgetApp')
  .component('userCreate', {
    templateUrl: 'app/user/user-create/user-create.component.html',
    controller: ['userService', 'costCenterService', '$routeParams', '$location', '$scope',
      function(userService, costCenterService, $routeParams, $location, $scope) {
        const ctrl = this;
        
        ctrl.user = {
          ldap: '',
          first_name: '',
          last_name: '',
          email: '',
          level: '',
          cost_center_code: ''
        };
        
        ctrl.costCenters = [];
        ctrl.ldap = $routeParams.ldap;
        ctrl.isEditMode = !!ctrl.ldap;
        ctrl.error = null;
        ctrl.saving = false;

        ctrl.$onInit = function() {
          loadCostCenters();
          if (ctrl.isEditMode) {
            loadUser();
          }
        };

        function loadCostCenters() {
          costCenterService.getAllCostCenters()
            .then(costCenters => {
              ctrl.costCenters = costCenters;
            })
            .catch(error => {
              console.error('Error loading cost centers:', error);
              ctrl.error = 'Failed to load cost centers.';
            });
        }

        function loadUser() {
          ctrl.loading = true;
          userService.getUser(ctrl.ldap)
            .then(user => {
              ctrl.user = user;
            })
            .catch(error => {
              ctrl.error = 'Failed to load user details.';
              console.error('Error loading user:', error);
            })
            .finally(() => {
              ctrl.loading = false;
              if (!$scope.$$phase) {
                $scope.$apply();
              }
            });
        }

        ctrl.saveUser = function() {
          if (!isValid()) {
            return;
          }

          ctrl.error = null;
          ctrl.saving = true;

          const savePromise = ctrl.isEditMode ?
            userService.updateUser(ctrl.ldap, ctrl.user) :
            userService.createUser(ctrl.user);

          savePromise
            .then(() => {
              $location.path('/users');
            })
            .catch(error => {
              ctrl.error = error.data?.error || 'Failed to save user.';
              console.error('Error saving user:', error);
            })
            .finally(() => {
              ctrl.saving = false;
              if (!$scope.$$phase) {
                $scope.$apply();
              }
            });
        };

        function isValid() {
          if (!ctrl.user.ldap || !ctrl.user.first_name || !ctrl.user.last_name || !ctrl.user.email) {
            ctrl.error = 'All required fields must be filled.';
            return false;
          }

          if (!isValidEmail(ctrl.user.email)) {
            ctrl.error = 'Please enter a valid email address.';
            return false;
          }

          return true;
        }

        function isValidEmail(email) {
          const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          return emailRegex.test(email);
        }

        ctrl.goBack = function() {
          $location.path('/users');
        };
      }
    ]
  });

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\user\user-list\user-list.component.html -----
<!-- frontend/src/app/user/user-list/user-list.component.html -->
<div class="budget-list-container">
    <div class="budget-header">
        <h2 class="budget-title">User Management</h2>
        <button ng-click="$ctrl.goToCreateUser()" class="create-button">
            <i class="fas fa-plus"></i> Add User
        </button>
    </div>

    <div class="filter-section">
        <div>
            <input type="text" 
                   ng-model="$ctrl.searchQuery" 
                   ng-change="$ctrl.filterUsers()"
                   placeholder="Search users..."
                   class="filter-input">
        </div>
        
        <div>
            <select ng-model="$ctrl.selectedCostCenter" 
                    ng-change="$ctrl.filterUsers()"
                    class="filter-input">
                <option value="">All Cost Centers</option>
                <option ng-repeat="cc in $ctrl.costCenters" 
                        value="{{cc.cost_center_code}}">
                    {{cc.cost_center_name}}
                </option>
            </select>
        </div>
    </div>

    <div ng-if="$ctrl.loading" class="loading-spinner">
        <div class="spinner"></div>
        <p>Loading users...</p>
    </div>

    <div ng-if="$ctrl.error" class="error-message">
        <p>{{$ctrl.error}}</p>
    </div>

    <table ng-if="!$ctrl.loading && $ctrl.filteredUsers.length > 0" class="budget-table">
        <thead>
            <tr>
                <th ng-click="$ctrl.sortBy('ldap')">
                    LDAP
                    <i class="fas" ng-class="{'fa-sort-up': !$ctrl.sortReverse, 'fa-sort-down': $ctrl.sortReverse}" 
                       ng-if="$ctrl.sortField === 'ldap'"></i>
                </th>
                <th ng-click="$ctrl.sortBy('first_name')">
                    First Name
                    <i class="fas" ng-class="{'fa-sort-up': !$ctrl.sortReverse, 'fa-sort-down': $ctrl.sortReverse}" 
                       ng-if="$ctrl.sortField === 'first_name'"></i>
                </th>
                <th ng-click="$ctrl.sortBy('last_name')">
                    Last Name
                    <i class="fas" ng-class="{'fa-sort-up': !$ctrl.sortReverse, 'fa-sort-down': $ctrl.sortReverse}" 
                       ng-if="$ctrl.sortField === 'last_name'"></i>
                </th>
                <th ng-click="$ctrl.sortBy('email')">
                    Email
                    <i class="fas" ng-class="{'fa-sort-up': !$ctrl.sortReverse, 'fa-sort-down': $ctrl.sortReverse}" 
                       ng-if="$ctrl.sortField === 'email'"></i>
                </th>
                <th ng-click="$ctrl.sortBy('level')">
                    Level
                    <i class="fas" ng-class="{'fa-sort-up': !$ctrl.sortReverse, 'fa-sort-down': $ctrl.sortReverse}" 
                       ng-if="$ctrl.sortField === 'level'"></i>
                </th>
                <th>Cost Center</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <tr ng-repeat="user in $ctrl.getPaginatedUsers()">
                <td>{{user.ldap}}</td>
                <td>{{user.first_name}}</td>
                <td>{{user.last_name}}</td>
                <td>{{user.email}}</td>
                <td>{{user.level}}</td>
                <td>{{(($ctrl.costCenters | filter:{cost_center_code:user.cost_center_code})[0].cost_center_name) || 'N/A'}}</td>
                <td>
                    <div class="action-buttons">
                        <button ng-click="$ctrl.editUser(user.ldap)" class="edit-button">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button ng-click="$ctrl.deleteUser(user.ldap)" class="delete-button">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>

    <div ng-if="!$ctrl.loading && !$ctrl.error && $ctrl.filteredUsers.length === 0" class="empty-state">
        <i class="fas fa-users"></i>
        <p>No users found</p>
    </div>

    <div ng-if="$ctrl.filteredUsers.length > 0" class="pagination">
        <div class="pagination-info">
            Showing {{($ctrl.currentPage - 1) * $ctrl.pageSize + 1}} to 
            {{Math.min($ctrl.currentPage * $ctrl.pageSize, $ctrl.filteredUsers.length)}} of 
            {{$ctrl.filteredUsers.length}} entries
        </div>
        <div class="pagination-buttons">
            <button ng-click="$ctrl.currentPage = $ctrl.currentPage - 1" 
                    ng-disabled="$ctrl.currentPage === 1"
                    class="pagination-button">
                Previous
            </button>
            <button ng-click="$ctrl.currentPage = $ctrl.currentPage + 1" 
                    ng-disabled="$ctrl.currentPage * $ctrl.pageSize >= $ctrl.filteredUsers.length"
                    class="pagination-button">
                Next
            </button>
        </div>
    </div>
</div>

----- Content from: C:\Users\sachi\Desktop\budget-management-app\frontend\src\app\user\user-list\user-list.component.js -----
// frontend/src/app/user/user-list/user-list.component.js
angular.module('budgetApp')
  .component('userList', {
    templateUrl: 'app/user/user-list/user-list.component.html',
    controller: ['userService', 'costCenterService', '$location', '$scope',
      function(userService, costCenterService, $location, $scope) {
        const ctrl = this;

        ctrl.users = [];
        ctrl.filteredUsers = [];
        ctrl.costCenters = [];
        ctrl.loading = true;
        ctrl.error = null;
        ctrl.searchQuery = '';
        ctrl.selectedCostCenter = '';
        ctrl.sortField = 'ldap';
        ctrl.sortReverse = false;
        ctrl.currentPage = 1;
        ctrl.pageSize = 10;

        ctrl.$onInit = function() {
          loadCostCenters();
          loadUsers();
        };

        function loadCostCenters() {
          costCenterService.getAllCostCenters()
            .then(costCenters => {
              ctrl.costCenters = costCenters;
            })
            .catch(error => {
              console.error('Error loading cost centers:', error);
            });
        }

        function loadUsers() {
          ctrl.loading = true;
          ctrl.error = null;

          userService.getAllUsers()
            .then(users => {
              ctrl.users = users;
              ctrl.filterUsers();
            })
            .catch(error => {
              ctrl.error = "Failed to load users. Please try again later.";
              console.error('Error loading users:', error);
            })
            .finally(() => {
              ctrl.loading = false;
              if (!$scope.$$phase) {
                $scope.$apply();
              }
            });
        }

        ctrl.filterUsers = function() {
          ctrl.filteredUsers = ctrl.users.filter(user => {
            const searchLower = ctrl.searchQuery.toLowerCase();
            const matchesSearch = !ctrl.searchQuery ||
              user.ldap.toLowerCase().includes(searchLower) ||
              user.first_name.toLowerCase().includes(searchLower) ||
              user.last_name.toLowerCase().includes(searchLower) ||
              user.email.toLowerCase().includes(searchLower);

            const matchesCostCenter = !ctrl.selectedCostCenter ||
              user.cost_center_code === ctrl.selectedCostCenter;

            return matchesSearch && matchesCostCenter;
          });

          ctrl.sortUsers();
          ctrl.currentPage = 1;
        };

        ctrl.sortUsers = function() {
          ctrl.filteredUsers.sort((a, b) => {
            let aVal = a[ctrl.sortField];
            let bVal = b[ctrl.sortField];

            if (typeof aVal === 'string') {
              aVal = aVal.toLowerCase();
              bVal = bVal.toLowerCase();
            }

            if (aVal < bVal) return ctrl.sortReverse ? 1 : -1;
            if (aVal > bVal) return ctrl.sortReverse ? -1 : 1;
            return 0;
          });
        };

        ctrl.sortBy = function(field) {
          if (ctrl.sortField === field) {
            ctrl.sortReverse = !ctrl.sortReverse;
          } else {
            ctrl.sortField = field;
            ctrl.sortReverse = false;
          }
          ctrl.sortUsers();
        };

        ctrl.goToCreateUser = function() {
          $location.path('/users/create');
        };

        ctrl.editUser = function(ldap) {
          $location.path(`/users/edit/${ldap}`);
        };

        ctrl.deleteUser = function(ldap) {
          if (confirm('Are you sure you want to delete this user?')) {
            userService.deleteUser(ldap)
              .then(() => {
                ctrl.users = ctrl.users.filter(user => user.ldap !== ldap);
                ctrl.filterUsers();
              })
              .catch(error => {
                console.error('Error deleting user:', error);
                alert('Failed to delete user.');
              });
          }
        };

        ctrl.getPaginatedUsers = function() {
          const startIndex = (ctrl.currentPage - 1) * ctrl.pageSize;
          return ctrl.filteredUsers.slice(startIndex, startIndex + ctrl.pageSize);
        };
      }
    ]
  });

